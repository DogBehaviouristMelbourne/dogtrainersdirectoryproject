---
// src/pages/trainers.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import TrainerCard from '../components/TrainerCard.astro';
import FloatingIcons from '../components/FloatingIcons.astro';
import trainersData from '../data/trainers.json';
import { supabase } from '../lib/supabaseClient.js';

// Use static data for build, with client-side Supabase loading for production
const trainers = trainersData;

const suburbs = [...new Set(trainers.map((t: any) => t.suburb || t.location))].filter(Boolean).sort();
const categories = [...new Set(trainers.flatMap((t: any) => t.categories ?? []))].sort();

// Get Stripe publishable key for premium subscriptions
const stripeKey = import.meta.env.STRIPE_PUBLISHABLE_KEY || '';
---

<Layout title="Find Dog Trainers in Melbourne" description="Browse certified dog trainers in Melbourne. Filter by specialization, location, and more to find the perfect match for your dog.">
    <Header />
    
    <main id="main-content">
        <section class="trainers-page">
            <FloatingIcons />
            <div class="container">
                <div class="page-header">
                    <h1>Find Your Perfect Dog Trainer</h1>
                    <p class="page-subtitle">Browse our directory of certified professionals in Melbourne</p>
                </div>

                <!-- Premium Upgrade Section for Trainers -->
                <section id="premium" class="premium-upgrade-section" style="margin-bottom: 2rem;">
                    <div class="premium-banner">
                        <div class="premium-content">
                            <h2>🌟 Are You a Trainer? Get Listed & Featured!</h2>
                            <p>Start with our Standard listing, then upgrade to Premium for maximum visibility</p>
                            
                            <!-- Loading State -->
                            <div id="subscription-loading" class="loading-state">
                                <p>Loading subscription status...</p>
                            </div>

                            <!-- Plans Container (Hidden until status loaded) -->
                            <div id="plans-container" class="premium-plans-grid" style="display: none;">
                                
                                <!-- Standard Plan (Always First) -->
                                <div id="standard-plan" class="plan-card standard-plan">
                                    <h3>Standard Annual Listing</h3>
                                    <div class="price">
                                        <span class="currency">$</span>
                                        <span class="amount">79</span>
                                        <span class="period">/year</span>
                                    </div>
                                    <div class="plan-subtitle">Required first step for all trainers</div>
                                    <ul class="plan-features">
                                        <li>� Professional directory listing</li>
                                        <li>📍 Searchable by location & category</li>
                                        <li>📊 Basic analytics dashboard</li>
                                        <li>🔄 Annual renewal</li>
                                    </ul>
                                    <button id="standard-button" class="upgrade-button plan-button primary" data-plan="standard" data-price-id="price_1RX0T2DEY1RddZfIATD9orLs">
                                        Get Standard Listing
                                    </button>
                                    <div id="standard-status" class="plan-status" style="display: none;"></div>
                                </div>

                                <!-- Premium Upgrade Plan (Conditional) -->
                                <div id="premium-plan" class="plan-card premium-plan" style="display: none;">
                                    <div class="premium-badge">Upgrade</div>
                                    <h3>Premium Monthly Features</h3>
                                    <div class="price">
                                        <span class="currency">$</span>
                                        <span class="amount">49</span>
                                        <span class="period">/month</span>
                                    </div>
                                    <div class="plan-subtitle">Add premium features to your Standard listing</div>
                                    <ul class="plan-features">
                                        <li>⭐ Featured badge & top placement</li>
                                        <li>🎯 Premium card styling</li>
                                        <li>📈 Advanced analytics</li>
                                        <li>� Up to 5x more visibility</li>
                                    </ul>
                                    <button id="premium-button" class="upgrade-button plan-button" data-plan="premium" data-price-id="price_1RX0QxDEY1RddZfIoRdn84vS">
                                        Upgrade to Premium
                                    </button>
                                    <div id="premium-status" class="plan-status" style="display: none;"></div>
                                </div>

                                <!-- Premium Not Available Message -->
                                <div id="premium-unavailable" class="plan-card unavailable-plan" style="display: none;">
                                    <h3>Premium Monthly Features</h3>
                                    <div class="price">
                                        <span class="currency">$</span>
                                        <span class="amount">49</span>
                                        <span class="period">/month</span>
                                    </div>
                                    <div class="plan-subtitle">Available after Standard purchase</div>
                                    <ul class="plan-features">
                                        <li>⭐ Featured badge & top placement</li>
                                        <li>🎯 Premium card styling</li>
                                        <li>� Advanced analytics</li>
                                        <li>🚀 Up to 5x more visibility</li>
                                    </ul>
                                    <button class="upgrade-button disabled" disabled>
                                        Requires Standard Subscription
                                    </button>
                                    <p class="upgrade-note">Purchase Standard listing first to unlock Premium features</p>
                                </div>

                                <!-- Premium Active Status -->
                                <div id="premium-active" class="plan-card active-plan" style="display: none;">
                                    <div class="active-badge">✅ Active</div>
                                    <h3>Premium Features</h3>
                                    <div class="status-text">Your premium features are active</div>
                                    <ul class="plan-features">
                                        <li>⭐ Featured placement active</li>
                                        <li>🎯 Premium styling applied</li>
                                        <li>📈 Advanced analytics available</li>
                                        <li>🚀 Maximum visibility</li>
                                    </ul>
                                    <button id="manage-premium-button" class="upgrade-button secondary">
                                        Manage Premium
                                    </button>
                                </div>
                            </div>

                            <!-- Quick Benefits -->
                            <div class="quick-benefits">
                                <div class="benefit-item">
                                    <span class="benefit-icon">📈</span>
                                    <span class="benefit-text">Professional presence</span>
                                </div>
                                <div class="benefit-item">
                                    <span class="benefit-icon">🎯</span>
                                    <span class="benefit-text">Local search visibility</span>
                                </div>
                                <div class="benefit-item">
                                    <span class="benefit-icon">⚡</span>
                                    <span class="benefit-text">Instant activation</span>
                                </div>
                            </div>

                            <!-- CTA for non-listed trainers -->
                            <div class="not-listed-cta">
                                <p><strong>Not listed yet?</strong> <a href="/submit" class="text-link">Submit your profile first →</a></p>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Search and Filter Controls -->
                <div style="display: flex; flex-wrap: wrap; gap: 1rem; justify-content: flex-end; margin-bottom: 1.5rem;">
                  <a href="/submit" class="button">Are You a Trainer? List Your Services</a>
                  <a href="/claim" class="button small">Already listed? Request an update</a>
                </div>
                <div class="search-controls">
                    <div class="search-bar">
                        <input 
                            type="text" 
                            id="search-input" 
                            placeholder="Search by trainer name, location, or specialization..."
                            aria-label="Search trainers"
                        >
                    </div>
                    
                    <div class="filter-controls">
                        <h3>Filter by Specialization:</h3>
                        <div class="category-filters">
                            <button class="category-button active" data-category="">All Trainers</button>
                            {categories.map(cat => (
                              <button class="category-button" data-category={cat}>{cat}</button>
                            ))}
                        </div>
                        <div class="suburb-filter">
                          <label for="suburbFilter">Suburb:</label>
                          <select id="suburbFilter">
                            <option value="">All suburbs</option>
                            {suburbs.map(s => <option value={s}>{s}</option>)}
                          </select>
                        </div>
                    </div>
                </div>

                <!-- Sort Controls -->
                <div class="sort-controls" style="margin-bottom:1.5rem;display:flex;align-items:center;gap:1em;">
                  <label for="sort-select" style="font-weight:500;">Sort by:</label>
                  <select id="sort-select" aria-label="Sort trainers">
                    <option value="featured">Featured First</option>
                    <option value="name">Name (A-Z)</option>
                    <option value="suburb">Suburb (A-Z)</option>
                    <option value="reviews">Most Reviewed</option>
                  </select>
                </div>

                <!-- Results Count -->
                <div class="results-info">
                    <p id="results-count">Showing all {trainers ? trainers.length : 0} trainers</p>
                </div>

                <!-- Trainers Grid -->
                <div class="trainer-grid" id="trainer-list"></div>
                
                <!-- Loading Skeleton -->
                <div class="trainer-grid skeleton-grid" id="loading-skeleton">
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                    <div class="skeleton-card">
                        <div class="skeleton-avatar"></div>
                        <div class="skeleton-content">
                            <div class="skeleton-line skeleton-title"></div>
                            <div class="skeleton-line skeleton-subtitle"></div>
                            <div class="skeleton-line skeleton-text"></div>
                            <div class="skeleton-line skeleton-text short"></div>
                        </div>
                    </div>
                </div>
                
                <div id="pagination-controls" class="pagination-controls"></div>

                <!-- No Results -->
                <div class="no-results" id="no-results" style="display: none;">
                  <img src="/images/sad-dog-404.png" alt="Sad dog" width="200" height="200">
                  <h3>No trainers found</h3>
                  <p>Try adjusting your search criteria or browse all trainers.</p>
                  <button class="button primary" onclick="clearFilters()">Clear Filters</button>
                </div>
            </div>
        </section>
    </main>
    
    <Footer />
</Layout>

<script define:vars={{suburbs, categories, trainers}}>
  window.addEventListener('DOMContentLoaded', async () => {
    // Try to load from Supabase first, fallback to static data
    let cardsData;
    try {
      const { data: supabaseTrainers, error } = await supabase
        .from('trainers')
        .select('*')
        .order('name');
      
      if (!error && supabaseTrainers && supabaseTrainers.length > 0) {
        // Convert Supabase data to match expected format
        cardsData = supabaseTrainers.map(trainer => ({
          id: trainer.id,
          name: trainer.name,
          location: trainer.suburb || trainer.address,
          suburb: trainer.suburb,
          categories: trainer.categories || [],
          matchTags: trainer.match_tags || [],
          phone: trainer.phone,
          email: trainer.email,
          website: trainer.website,
          description: trainer.description,
          profile_image_url: trainer.profile_image_url,
          rating: trainer.rating,
          review_count: trainer.review_count,
          social_links: trainer.social_links,
          avg_rating: trainer.avg_rating || trainer.rating,
          average_rating: trainer.average_rating || trainer.rating,
          // Premium fields
          premium_status: trainer.premium_status || 'inactive',
          premium_start_date: trainer.premium_start_date,
          premium_end_date: trainer.premium_end_date,
          premium_plan: trainer.premium_plan || 'none'
        }));
        console.log(`Loaded ${cardsData.length} trainers from Supabase`);
        console.log('Sample trainer data:', cardsData[0]);
      } else {
        throw new Error('No Supabase data available');
      }
    } catch (err) {
      console.log('Falling back to static data:', err.message);
      cardsData = JSON.parse(JSON.stringify(trainers)).map(t => t); // Deep copy for filtering
    }
    
    // Update dynamic filters based on loaded data
    const dynamicSuburbs = [...new Set(cardsData.map(t => t.suburb).filter(Boolean))].sort();
    const dynamicCategories = [...new Set(cardsData.flatMap(t => t.categories ?? []))].sort();
    
    // Update suburb filter options
    const suburbSelect = document.getElementById('suburbFilter');
    suburbSelect.innerHTML = '<option value="">All suburbs</option>' + 
      dynamicSuburbs.map(s => `<option value="${s}">${s}</option>`).join('');
    
    // Update category filter buttons
    const categoryContainer = document.querySelector('.category-filters');
    categoryContainer.innerHTML = '<button class="category-button active" data-category="">All Trainers</button>' +
      dynamicCategories.map(cat => `<button class="category-button" data-category="${cat}">${cat}</button>`).join('');
    
    let filtered = cardsData;
    let currentPage = 1;
    const perPage = 12;
    const trainerList = document.getElementById('trainer-list');
    const pagination = document.getElementById('pagination-controls');
    const resultsCount = document.getElementById('results-count');
    const skeletonLoader = document.getElementById('loading-skeleton');
    
    console.log('DOM elements found:');
    console.log('trainerList:', trainerList);
    console.log('pagination:', pagination);
    console.log('resultsCount:', resultsCount);
    console.log('skeletonLoader:', skeletonLoader);
    
    if (!trainerList) {
      console.error('trainer-list element not found!');
      return;
    }
    
    let currentSearchTerm = '';
    let currentCategory = '';
    let currentSuburb = '';

    const searchInput = document.getElementById('search-input');
    const sortSelect = document.getElementById('sort-select');

    // Show skeleton loader initially
    skeletonLoader.style.display = 'grid';

    function createTrainerCardHTML(trainer) {
      console.log('Creating card for trainer:', trainer.name, trainer);
      
      const rating = trainer.avg_rating || trainer.average_rating || trainer.rating;
      const reviewCount = trainer.review_count;
      const categories = (trainer.categories || []).join(', ');
      const slug = trainer.slug || trainer.name.toLowerCase().replace(/\s+/g, '-');
      const isPremium = trainer.premium_status === 'active';
      
      const cardHTML = `
        <article class="trainer-card ${isPremium ? 'premium-card' : ''}" 
          data-suburb="${trainer.suburb || ''}"
          data-cats="${(trainer.categories || []).join(',')}"
          data-name="${trainer.name.toLowerCase()}"
          data-desc="${(trainer.description || '').toLowerCase()}"
          tabindex="0"
          role="group"
          aria-label="Trainer card for ${trainer.name}">
          
          ${isPremium ? '<div class="premium-badge">Featured</div>' : ''}
          
          <img src="${trainer.profile_image_url || '/images/sad-dog-404.png'}" 
               alt="${trainer.name}" 
               loading="lazy" 
               width="80" height="80" 
               style="border-radius: 50%; object-fit: cover; margin-bottom: 0.5em;"
               onerror="this.src='/images/sad-dog-404.png'" />
          
          <h3>${trainer.name}</h3>
          
          ${rating ? `
            <div class="trainer-rating">
              <span class="star">★</span> ${rating.toFixed(1)}
              ${reviewCount ? `<span class="review-count">(${reviewCount} review${reviewCount > 1 ? 's' : ''})</span>` : ''}
            </div>
          ` : ''}
          
          <p class="trainer-location">${trainer.suburb || trainer.location || ''}</p>
          
          ${categories ? `<div class="trainer-categories">${categories}</div>` : ''}
          
          ${trainer.description ? `<p class="trainer-description">${trainer.description}</p>` : ''}
          
          <div class="trainer-contact">
            ${trainer.phone ? `<span class="trainer-phone">📞 ${trainer.phone}</span>` : ''}
            ${trainer.email ? `<span class="trainer-email">✉️ Contact</span>` : ''}
            ${trainer.website ? `<span class="trainer-website">🌐 Website</span>` : ''}
          </div>
        </article>
      `;
      
      console.log('Generated HTML length:', cardHTML.length);
      return cardHTML;
    }

    function renderPage(page) {
      console.log('renderPage called with page:', page);
      console.log('filtered data length:', filtered.length);
      console.log('cardsData length:', cardsData.length);
      
      // Hide skeleton loader once we start rendering
      skeletonLoader.style.display = 'none';
      
      trainerList.innerHTML = '';
      const start = (page - 1) * perPage;
      const end = start + perPage;
      const pageData = filtered.slice(start, end);
      
      console.log('pageData for page', page, ':', pageData.length, 'items');
      console.log('First trainer:', pageData[0]);
      
      if (pageData.length === 0) {
        console.log('No data to show, showing no-results');
        document.getElementById('no-results').style.display = 'block';
        pagination.innerHTML = '';
        return;
      } else {
        if (document.getElementById('no-results')) document.getElementById('no-results').style.display = 'none';
      }
      
      pageData.forEach((trainer, index) => {
        console.log(`Rendering trainer ${index}:`, trainer.name);
        try {
          const div = document.createElement('div');
          const cardHTML = createTrainerCardHTML(trainer);
          console.log(`Card HTML for ${trainer.name}:`, cardHTML.substring(0, 100) + '...');
          div.innerHTML = cardHTML;
          
          // Ensure we have a valid element to append
          if (div.firstElementChild) {
            trainerList.appendChild(div.firstElementChild);
          } else {
            console.error(`No valid element created for trainer ${trainer.name}`);
          }
        } catch (error) {
          console.error(`Error rendering trainer ${trainer.name}:`, error);
        }
      });
      
      renderPagination();
      resultsCount.textContent =
        filtered.length === cardsData.length
          ? `Showing ${filtered.length} trainers`
          : `Showing ${filtered.length} of ${cardsData.length} trainers`;
      
      console.log('Render complete. trainerList children:', trainerList.children.length);
    }

    function renderPagination() {
      const totalPages = Math.ceil(filtered.length / perPage);
      if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
      }
      let html = '';
      for (let i = 1; i <= totalPages; i++) {
        html += `<button class="pagination-btn${i === currentPage ? ' active' : ''}" data-page="${i}">${i}</button>`;
      }
      pagination.innerHTML = html;
      document.querySelectorAll('.pagination-btn').forEach(btn => {
        btn.addEventListener('click', e => {
          currentPage = parseInt(e.target.dataset.page);
          renderPage(currentPage);
          window.scrollTo({ top: trainerList.offsetTop - 80, behavior: 'smooth' });
        });
      });
    }

    function sortTrainers() {
      // Plan: Take the existing `filtered` array, sort so that any trainer with
      // premium_status === 'active' appears first, then render that sorted list.
      // Implementation: 
      // 1. Create sorting logic that prioritizes premium trainers in all sort options
      // 2. Within each sort category, premium trainers appear first, followed by regular trainers
      // Expected Results: The page shows all active-premium trainers at the top, followed by the rest.
      
      const sortBy = sortSelect.value;
      if (sortBy === 'name') {
        filtered.sort((a, b) => {
          // Premium trainers first, then alphabetical
          if (a.premium_status === 'active' && b.premium_status !== 'active') return -1;
          if (b.premium_status === 'active' && a.premium_status !== 'active') return 1;
          return a.name.localeCompare(b.name);
        });
      } else if (sortBy === 'suburb') {
        filtered.sort((a, b) => {
          // Premium trainers first, then by suburb
          if (a.premium_status === 'active' && b.premium_status !== 'active') return -1;
          if (b.premium_status === 'active' && a.premium_status !== 'active') return 1;
          return (a.suburb || a.location || '').localeCompare(b.suburb || b.location || '');
        });
      } else if (sortBy === 'reviews') {
        filtered.sort((a, b) => {
          // Premium trainers first, then by review count
          if (a.premium_status === 'active' && b.premium_status !== 'active') return -1;
          if (b.premium_status === 'active' && a.premium_status !== 'active') return 1;
          return (b.review_count || 0) - (a.review_count || 0);
        });
      } else if (sortBy === 'featured') {
        filtered.sort((a, b) => {
          // Premium first, then regular trainers
          if (a.premium_status === 'active' && b.premium_status !== 'active') return -1;
          if (b.premium_status === 'active' && a.premium_status !== 'active') return 1;
          return a.name.localeCompare(b.name);
        });
      }
    }

    function applyFilters() {
      filtered = cardsData.filter(trainer => {
        const name    = trainer.name.toLowerCase();
        const suburb  = (trainer.suburb || trainer.location || '').toLowerCase();
        const catsArr = trainer.categories || [];
        const desc    = trainer.description?.toLowerCase() || '';
        const matchCat  = !currentCategory || catsArr.includes(currentCategory);
        const matchSub  = !currentSuburb  || suburb === currentSuburb.toLowerCase();
        const matchText = !currentSearchTerm || (
            name.includes(currentSearchTerm) ||
            suburb.includes(currentSearchTerm) ||
            desc.includes(currentSearchTerm)
          );
        return matchCat && matchSub && matchText;
      });
      sortTrainers();
      currentPage = 1;
      renderPage(currentPage);
    }

    // Set up event listeners for dynamic elements AFTER they are created
    function setupEventListeners() {
      const categoryButtons = document.querySelectorAll('.category-button');
      const suburbSelectElement = document.getElementById('suburbFilter');
      
      console.log('Setting up event listeners...');
      console.log('Found category buttons:', categoryButtons.length);
      
      searchInput.addEventListener('input', (event) => {
        currentSearchTerm = event.target.value.trim().toLowerCase();
        applyFilters();
      });
      
      categoryButtons.forEach((button, index) => {
        console.log(`Adding click listener to button ${index}:`, button.textContent);
        button.addEventListener('click', (event) => {
          console.log('Category button clicked:', event.target.textContent);
          categoryButtons.forEach(btn => btn.classList.remove('active'));
          event.target.classList.add('active');
          currentCategory = event.target.dataset.category;
          console.log('New category:', currentCategory);
          applyFilters();
        });
      });
      
      suburbSelectElement.addEventListener('change', (event) => {
        currentSuburb = event.target.value;
        applyFilters();
      });
      
      sortSelect.addEventListener('change', () => {
        sortTrainers();
        renderPage(currentPage);
      });
      
      window.clearFilters = () => {
        currentSearchTerm = '';
        currentCategory = '';
        currentSuburb = '';
        searchInput.value = '';
        suburbSelectElement.value = '';
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        categoryButtons[0].classList.add('active');
        applyFilters();
      };
    }

    // Initial render - set up event listeners first, then apply filters
    setupEventListeners();
    applyFilters();
  });
</script>

<!-- Load Stripe.js for premium subscription functionality -->
<script src="https://js.stripe.com/v3/"></script>

<script define:vars={{stripeKey}}>
// Pass environment variable to client
window.STRIPE_PUBLISHABLE_KEY = stripeKey;
</script>

<script>
// Premium subscription functionality with hierarchy enforcement
document.addEventListener('DOMContentLoaded', async () => {
    console.log('🔧 DEBUG: Premium subscription script loading...');
    console.log('🔧 DEBUG: Stripe publishable key available:', !!window.STRIPE_PUBLISHABLE_KEY);
    
    // Check if Stripe publishable key is available
    if (!window.STRIPE_PUBLISHABLE_KEY) {
        console.error('❌ STRIPE_PUBLISHABLE_KEY is not available!');
        showConfigurationError();
        return;
    }
    
    console.log('✅ Stripe publishable key found, initializing...');
    
    // Initialize Stripe
    const stripe = Stripe(window.STRIPE_PUBLISHABLE_KEY);
    
    if (!stripe) {
        console.error('❌ Failed to load Stripe.js');
        return;
    }
    
    console.log('✅ Stripe.js loaded successfully');
    
    // Get trainer ID and load subscription status
    const trainerId = getTrainerId();
    if (trainerId) {
        await loadSubscriptionStatus(trainerId);
    } else {
        showNoTrainerIdState();
    }
    
    // Set up event listeners
    setupPlanButtonListeners(stripe, trainerId);
    
    // Handle payment success/cancellation
    handlePaymentRedirects();
    
    // Get trainer ID from URL parameters or prompt user
    function getTrainerId() {
        const urlParams = new URLSearchParams(window.location.search);
        let trainerId = urlParams.get('trainerId');
        
        if (!trainerId) {
            // For testing/demo, allow manual entry
            // In production, this should come from authentication
            trainerId = prompt('Enter your Trainer ID or email (for testing):');
        }
        
        console.log('🔧 DEBUG: Using trainer ID:', trainerId);
        return trainerId;
    }
    
    // Load trainer's subscription status from Supabase
    async function loadSubscriptionStatus(trainerId) {
        console.log('📡 Loading subscription status for trainer:', trainerId);
        
        try {
            // Query trainer by ID or email
            let query = supabase
                .from('trainers')
                .select('payment_status, premium_status, name, email');
            
            if (trainerId.includes('@')) {
                query = query.eq('email', trainerId);
            } else {
                query = query.eq('id', trainerId);
            }
            
            const { data: trainer, error } = await query.single();
            
            if (error) {
                console.error('❌ Error fetching trainer:', error);
                showTrainerNotFoundState();
                return;
            }
            
            console.log('✅ Trainer found:', trainer);
            showPlansBasedOnStatus(trainer.payment_status, trainer.premium_status);
            
        } catch (error) {
            console.error('❌ Error loading subscription status:', error);
            showGenericPlansState();
        }
    }
    
    // Show plans based on subscription status
    function showPlansBasedOnStatus(paymentStatus, premiumStatus) {
        console.log('🎯 Showing plans for status:', { paymentStatus, premiumStatus });
        
        // Hide loading state
        document.getElementById('subscription-loading').style.display = 'none';
        document.getElementById('plans-container').style.display = 'grid';
        
        const standardPlan = document.getElementById('standard-plan');
        const premiumPlan = document.getElementById('premium-plan');
        const premiumUnavailable = document.getElementById('premium-unavailable');
        const premiumActive = document.getElementById('premium-active');
        
        // Reset all plan visibility
        premiumPlan.style.display = 'none';
        premiumUnavailable.style.display = 'none';
        premiumActive.style.display = 'none';
        
        if (paymentStatus !== 'paid_standard') {
            // Show Standard plan as primary option
            standardPlan.style.display = 'block';
            document.getElementById('standard-button').textContent = 'Get Standard Listing';
            document.getElementById('standard-button').disabled = false;
            
            // Show Premium as unavailable
            premiumUnavailable.style.display = 'block';
            
        } else {
            // Has Standard subscription
            standardPlan.style.display = 'block';
            document.getElementById('standard-status').innerHTML = '<div class="status-active">✅ Standard Active</div>';
            document.getElementById('standard-status').style.display = 'block';
            document.getElementById('standard-button').textContent = 'Standard Active';
            document.getElementById('standard-button').disabled = true;
            document.getElementById('standard-button').classList.add('disabled');
            
            if (premiumStatus === 'active') {
                // Show Premium as active
                premiumActive.style.display = 'block';
            } else {
                // Show Premium as available upgrade
                premiumPlan.style.display = 'block';
            }
        }
    }
    
    // Show configuration error state
    function showConfigurationError() {
        document.getElementById('subscription-loading').innerHTML = `
            <div class="error-state">
                <h3>⚠️ Configuration Error</h3>
                <p>Payment system is not configured. Please contact support.</p>
            </div>
        `;
    }
    
    // Show trainer not found state
    function showTrainerNotFoundState() {
        document.getElementById('subscription-loading').innerHTML = `
            <div class="error-state">
                <h3>👤 Trainer Not Found</h3>
                <p>We couldn't find your trainer profile. Please <a href="/submit">submit your profile</a> first.</p>
            </div>
        `;
    }
    
    // Show no trainer ID state
    function showNoTrainerIdState() {
        console.log('📝 No trainer ID provided, showing generic plans');
        document.getElementById('subscription-loading').style.display = 'none';
        document.getElementById('plans-container').style.display = 'grid';
        
        // Show Standard plan and Premium as unavailable
        document.getElementById('standard-plan').style.display = 'block';
        document.getElementById('premium-unavailable').style.display = 'block';
    }
    
    // Show generic plans (fallback)
    function showGenericPlansState() {
        console.log('🔄 Showing generic plans state');
        showNoTrainerIdState();
    }
    
    // Set up event listeners for plan buttons
    function setupPlanButtonListeners(stripe, trainerId) {
        const planButtons = document.querySelectorAll('.plan-button:not(.disabled)');
        console.log(`🔧 DEBUG: Setting up ${planButtons.length} plan button listeners`);
        
        planButtons.forEach((button, index) => {
            if (button.disabled) return;
            
            console.log(`🔧 DEBUG: Adding event listener to button ${index + 1}`);
            
            button.addEventListener('click', async (e) => {
                console.log('🔧 DEBUG: Plan button clicked!', e.target);
                e.preventDefault();
                
                const priceId = e.target.dataset.priceId;
                const plan = e.target.dataset.plan;
                
                console.log('🔧 DEBUG: Button data:', { priceId, plan, trainerId });
                
                if (!priceId || !trainerId) {
                    console.error('❌ Missing required data:', { priceId, trainerId });
                    alert('Missing required information. Please try again.');
                    return;
                }
                
                await handleCheckoutSession(stripe, e.target, priceId, plan, trainerId);
            });
        });
        
        // Setup manage premium button
        const managePremiumButton = document.getElementById('manage-premium-button');
        if (managePremiumButton) {
            managePremiumButton.addEventListener('click', () => {
                // Redirect to dashboard or show management options
                window.location.href = '/dashboard';
            });
        }
    }
    
    // Handle checkout session creation
    async function handleCheckoutSession(stripe, button, priceId, plan, trainerId) {
        // Show loading state
        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = 'Creating checkout session...';
        button.style.opacity = '0.7';
        
        try {
            console.log(`🔧 Creating checkout session for plan: ${plan}, priceId: ${priceId}, trainerId: ${trainerId}`);
            
            // Call our checkout session API
            const response = await fetch('/api/create-checkout-session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    priceId: priceId,
                    trainerId: trainerId,
                    planName: plan
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (!data.sessionId) {
                throw new Error('No session ID returned from server');
            }
            
            // Redirect to Stripe Checkout
            console.log('✅ Redirecting to Stripe Checkout...');
            button.textContent = 'Redirecting to payment...';
            
            const { error } = await stripe.redirectToCheckout({
                sessionId: data.sessionId
            });
            
            if (error) {
                throw new Error(error.message);
            }
            
        } catch (error) {
            console.error('❌ Error creating checkout session:', error);
            
            // Show user-friendly error message
            let errorMessage = 'Sorry, there was a problem processing your request. ';
            if (error.message.includes('404')) {
                errorMessage += 'The payment service is not configured. Please contact support.';
            } else if (error.message.includes('Premium requires Standard')) {
                errorMessage += 'Premium features require an active Standard subscription.';
            } else {
                errorMessage += error.message;
            }
            
            alert(errorMessage);
            
            // Reset button state
            button.disabled = false;
            button.textContent = originalText;
            button.style.opacity = '1';
        }
    }
    
    // Handle successful payment redirect and cancellations
    function handlePaymentRedirects() {
        const urlParams = new URLSearchParams(window.location.search);
        const sessionId = urlParams.get('session_id');
        const cancelled = urlParams.get('cancelled');
        
        if (sessionId) {
            console.log('✅ Payment successful, session ID:', sessionId);
            showSuccessModal();
            // Remove session_id from URL
            const newUrl = window.location.pathname + window.location.hash;
            window.history.replaceState({}, document.title, newUrl);
        }
        
        if (cancelled) {
            console.log('💔 Payment cancelled');
            showCancelledMessage();
            // Remove cancelled param from URL
            const newUrl = window.location.pathname + window.location.hash;
            window.history.replaceState({}, document.title, newUrl);
        }
    }
    
    // Show success modal
    function showSuccessModal() {
        const successModal = document.createElement('div');
        successModal.className = 'success-overlay';
        successModal.innerHTML = `
            <div class="success-modal">
                <div class="success-content">
                    <h3>🎉 Payment Successful!</h3>
                    <p>Your subscription has been activated. Changes to your listing will appear within a few minutes.</p>
                    <div class="success-actions">
                        <button onclick="this.closest('.success-overlay').remove(); location.reload();" class="button primary">Refresh Page</button>
                        <a href="/dashboard" class="button secondary">Go to Dashboard</a>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(successModal);
    }
    
    // Show cancelled message
    function showCancelledMessage() {
        const cancelMessage = document.createElement('div');
        cancelMessage.className = 'cancel-notification';
        cancelMessage.innerHTML = `
            <div class="cancel-content">
                <h3>Payment Cancelled</h3>
                <p>No charges were made. You can try again anytime.</p>
                <button onclick="this.parentElement.parentElement.remove()" class="button small">Close</button>
            </div>
        `;
        cancelMessage.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 1000;
            background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;
            padding: 1rem; max-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        `;
        document.body.appendChild(cancelMessage);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (cancelMessage.parentElement) {
                cancelMessage.remove();
            }
        }, 5000);
    }
});
</script>
<style>
    .trainers-page {
        padding: var(--space-4) 0;
        min-height: 70vh;
    }

    @media (min-width: 768px) {
        .trainers-page {
            padding: var(--space-12) 0;
        }
    }

    .page-header {
        text-align: center;
        margin-bottom: var(--space-8);
        padding: 0 var(--space-4);
    }

    @media (min-width: 768px) {
        .page-header {
            margin-bottom: var(--space-12);
            padding: 0;
        }
    }

    .page-header h1 {
        font-size: var(--font-size-3xl);
        color: var(--color-text-light);
        margin-bottom: var(--space-4);
    }

    @media (min-width: 768px) {
        .page-header h1 {
            font-size: var(--font-size-4xl);
        }
    }

    .page-subtitle {
        font-size: var(--font-size-lg);
        color: var(--color-text-light);
        opacity: 0.8;
        max-width: 600px;
        margin: 0 auto;
    }

    /* Premium Upgrade Section */
    .premium-upgrade-section {
        background: var(--color-card-bg);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
    }

    .premium-upgrade-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--color-accent-teal), var(--color-accent-mustard));
    }

    .premium-banner {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 2rem;
        border-radius: 12px;
        background: linear-gradient(135deg, #e0f7fa 0%, #e8f5e9 100%);
        margin-bottom: 1.5rem;
    }

    .premium-content {
        max-width: 1000px;
        width: 100%;
    }

    .premium-content h2 {
        font-size: 2.5rem;
        color: var(--color-primary);
        margin-bottom: 1rem;
        background: linear-gradient(135deg, var(--color-accent-teal), var(--color-accent-mustard));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .premium-content > p {
        font-size: 1.2rem;
        color: var(--color-text-light);
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    /* Loading State */
    .loading-state {
        text-align: center;
        padding: 3rem;
        color: var(--color-text-light);
    }

    .loading-state p {
        font-size: 1.1rem;
        margin: 0;
    }

    /* Error States */
    .error-state {
        text-align: center;
        padding: 2rem;
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        margin: 1rem 0;
    }

    .error-state h3 {
        color: #856404;
        margin-bottom: 1rem;
    }

    .error-state p {
        color: #856404;
        margin: 0;
    }

    /* Premium Plans Grid */
    .premium-plans-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .plan-card {
        background: var(--color-card-bg-light);
        border: 2px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
    }

    .plan-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        border-color: var(--color-accent-teal);
    }

    /* Standard Plan Styling */
    .standard-plan {
        border-color: var(--color-accent-teal);
    }

    .standard-plan.has-subscription {
        background: linear-gradient(135deg, 
            var(--color-card-bg-light) 0%, 
            color-mix(in srgb, var(--color-accent-teal) 5%, var(--color-card-bg-light)) 100%
        );
    }

    /* Premium Plan Styling */
    .premium-plan {
        border-color: var(--color-accent-mustard);
    }

    .premium-badge {
        position: absolute;
        top: -12px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--color-accent-mustard);
        color: white;
        padding: 0.4rem 1rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(232, 185, 79, 0.3);
    }

    /* Unavailable Plan Styling */
    .unavailable-plan {
        opacity: 0.6;
        border-color: #ddd;
        background: #f8f9fa;
    }

    .unavailable-plan:hover {
        transform: none;
        box-shadow: none;
        border-color: #ddd;
    }

    /* Active Plan Styling */
    .active-plan {
        border-color: #28a745;
        background: linear-gradient(135deg, 
            var(--color-card-bg-light) 0%, 
            color-mix(in srgb, #28a745 5%, var(--color-card-bg-light)) 100%
        );
    }

    .active-badge {
        position: absolute;
        top: -12px;
        left: 50%;
        transform: translateX(-50%);
        background: #28a745;
        color: white;
        padding: 0.4rem 1rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .plan-card h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: var(--color-text-dark);
    }

    .plan-card .price {
        margin-bottom: 0.5rem;
        display: flex;
        align-items: baseline;
        justify-content: center;
        gap: 0.2rem;
    }

    .plan-card .currency {
        font-size: 1.2rem;
        color: var(--color-text-light);
    }

    .plan-card .amount {
        font-size: 3rem;
        font-weight: 700;
        color: var(--color-primary);
    }

    .plan-card .period {
        font-size: 1rem;
        color: var(--color-text-light);
        opacity: 0.8;
    }

    .plan-subtitle {
        color: var(--color-text-light);
        font-size: 0.9rem;
        margin-bottom: 1.5rem;
        font-style: italic;
    }

    .plan-features {
        list-style: none;
        padding: 0;
        margin: 1.5rem 0;
        text-align: left;
    }

    .plan-features li {
        padding: 0.5rem 0;
        color: var(--color-text-dark);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .upgrade-button {
        background: var(--color-primary);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 1rem 1.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
        margin-top: 1rem;
    }

    .upgrade-button:hover:not(:disabled) {
        background: var(--color-primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    }

    .upgrade-button:active {
        transform: translateY(0);
    }

    .upgrade-button:disabled,
    .upgrade-button.disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        background: #ccc;
    }

    .upgrade-button.primary {
        background: var(--color-accent-mustard);
    }

    .upgrade-button.primary:hover:not(:disabled) {
        background: color-mix(in srgb, var(--color-accent-mustard) 85%, black);
    }

    .upgrade-button.secondary {
        background: var(--color-accent-teal);
    }

    .upgrade-button.secondary:hover:not(:disabled) {
        background: color-mix(in srgb, var(--color-accent-teal) 85%, black);
    }

    /* Plan Status */
    .plan-status {
        margin-top: 1rem;
    }

    .status-active {
        color: #28a745;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .status-text {
        font-size: 1.1rem;
        color: var(--color-text-light);
        margin-bottom: 1.5rem;
    }

    .upgrade-note {
        margin-top: 1rem;
        font-size: 0.9rem;
        color: var(--color-text-light);
        font-style: italic;
    }

    /* Quick Benefits */
    .quick-benefits {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 2rem;
        margin: 2rem 0;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.5);
        border-radius: 12px;
    }

    .benefit-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--color-text-dark);
    }

    .benefit-icon {
        font-size: 1.2rem;
    }

    .benefit-text {
        font-weight: 500;
        font-size: 0.95rem;
    }

    /* Not Listed CTA */
    .not-listed-cta {
        margin-top: 2rem;
        padding: 1.5rem;
        background: rgba(var(--color-accent-teal-rgb), 0.1);
        border-radius: 8px;
        border-left: 4px solid var(--color-accent-teal);
    }

    .not-listed-cta p {
        margin: 0;
        color: var(--color-text-dark);
    }

    .text-link {
        color: var(--color-accent-teal);
        text-decoration: none;
        font-weight: 600;
    }

    .text-link:hover {
        text-decoration: underline;
    }

    /* Success/Error Modals */
    .success-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .success-modal {
        background: white;
        border-radius: 16px;
        max-width: 500px;
        margin: 1rem;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
    }

    .success-content {
        padding: 3rem 2rem;
        text-align: center;
    }

    .success-content h3 {
        color: var(--color-accent-teal);
        margin-bottom: 1rem;
        font-size: 1.8rem;
    }

    .success-content p {
        margin-bottom: 2rem;
        color: var(--color-text-light);
        line-height: 1.6;
    }

    .success-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .success-actions .button {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .premium-content h2 {
            font-size: 2rem;
        }
        
        .premium-plans-grid {
            grid-template-columns: 1fr;
        }
        
        .plan-card {
            padding: 1.5rem;
        }
        
        .plan-card .amount {
            font-size: 2.5rem;
        }
        
        .quick-benefits {
            flex-direction: column;
            gap: 1rem;
        }
    }

    @media (max-width: 480px) {
        .premium-upgrade-section {
            padding: 1rem;
        }
        
        .premium-banner {
            padding: 1.5rem;
        }
    }

    /* Search Controls */
    .search-controls {
        background-color: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-sm);
    }

    .search-bar {
        margin-bottom: 2rem;
    }

    .search-bar input {
        width: 100%;
        padding: 1rem 1.5rem;
        border: 1px solid var(--color-border-light);
        border-radius: 8px;
        font-size: 1.1em;
        background-color: var(--color-background-light);
        color: var(--color-text-light);
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .search-bar input:focus {
        outline: none;
        border-color: var(--color-accent-teal);
        box-shadow: 0 0 0 3px rgba(90, 155, 156, 0.1);
    }

    .filter-controls h3 {
        margin-bottom: 1rem;
        color: var(--color-text-light);
        font-size: 1.2em;
    }

    .category-filters {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
    }

    .category-button {
        background-color: transparent;
        color: var(--color-text-light);
        border: 1px solid var(--color-border-light);
        padding: 0.8em 1.5em;
        border-radius: 8px;
        font-size: 0.9em;
        font-weight: 600;
        font-family: 'Inter', sans-serif;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease;
        will-change: transform;
    }

    .category-button:hover {
        background-color: var(--color-border-light);
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.08);
    }

    .category-button:active {
        transform: translateY(0);
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        background-color: color-mix(in srgb, var(--color-border-light) 90%, black);
    }

    .category-button.active {
        background-color: var(--color-primary-button-bg);
        color: var(--color-primary-button-text);
        border-color: var(--color-primary-button-bg);
        font-weight: 600;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .category-button.active:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

    .suburb-filter {
        margin-top: 1.5rem;
    }

    .suburb-filter label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--color-text-light);
        font-weight: 500;
    }

    .suburb-filter select {
        width: 100%;
        padding: 0.8rem 1.2rem;
        border: 1px solid var(--color-border-light);
        border-radius: 8px;
        font-size: 1em;
        background-color: var(--color-background-light);
        color: var(--color-text-light);
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .suburb-filter select:focus {
        outline: none;
        border-color: var(--color-accent-teal);
        box-shadow: 0 0 0 3px rgba(90, 155, 156, 0.1);
    }

    /* Sort Controls */
    .sort-controls select {
      border: 1px solid var(--color-border-light);
      border-radius: 8px;
      padding: 0.5em 1em;
      font-size: 1em;
      background: var(--color-background-light);
      color: var(--color-text-light);
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    .sort-controls select:focus {
      outline: none;
      border-color: var(--color-accent-teal);
      box-shadow: 0 0 0 2px rgba(90,155,156,0.12);
    }

    /* Results Info */
    .results-info {
        margin-bottom: 2rem;
    }

    .results-info p {
        color: var(--color-text-light);
        opacity: 0.8;
        font-weight: 500;
    }

    /* Trainers Grid */
    .trainer-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .trainer-grid.results-fade-in {
        animation: resultsFadeIn 0.5s ease-out;
    }

    /* Mobile-first trainer cards grid */
    #trainer-list {
        display: grid;
        gap: var(--space-4);
        grid-template-columns: 1fr;
        padding: 0 var(--space-4);
    }

    /* 2 cards per row from 360px */
    @media (min-width: 360px) {
        #trainer-list {
            grid-template-columns: repeat(2, 1fr);
            gap: var(--space-3);
        }
    }

    /* 3 cards per row from 768px */
    @media (min-width: 768px) {
        #trainer-list {
            grid-template-columns: repeat(3, 1fr);
            gap: var(--space-4);
            padding: 0;
        }
    }

    /* 4 cards per row from 1024px */
    @media (min-width: 1024px) {
        #trainer-list {
            grid-template-columns: repeat(4, 1fr);
            gap: var(--space-6);
        }
    }

    /* Trainer card styles */
    .trainer-card {
        background: var(--color-card-bg-light);
        border-radius: var(--card-radius);
        padding: var(--card-padding);
        box-shadow: var(--shadow-neu-light);
        transition: all var(--animation-duration-base) var(--transition-smooth);
        display: flex;
        flex-direction: column;
        transform-style: preserve-3d;
        perspective: var(--perspective);
    }
    
    .dark-mode .trainer-card {
        box-shadow: var(--shadow-neu-dark);
    }
    
    .trainer-card:hover {
        transform: translateY(-8px) var(--rotate-y);
        --rotation: 5deg;
    }
    
    .trainer-card:active {
        transform: translateY(-2px);
        box-shadow: var(--shadow-neu-inset-light);
    }
    
    .dark-mode .trainer-card:active {
        box-shadow: var(--shadow-neu-inset-dark);
    }

    @media (min-width: 768px) {
        .trainer-card {
            padding: var(--space-4);
        }
    }

    .trainer-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    .trainer-card h3 {
        font-size: var(--font-size-lg);
        margin: var(--space-2) 0;
    }

    @media (min-width: 768px) {
        .trainer-card h3 {
            font-size: var(--font-size-xl);
        }
    }

    .trainer-card img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
    }

    @media (min-width: 768px) {
        .trainer-card img {
            width: 80px;
            height: 80px;
        }
    }

    /* Filter controls for mobile */
    .search-controls {
        padding: 0 var(--space-4);
        margin-bottom: var(--space-6);
    }

    @media (min-width: 768px) {
        .search-controls {
            padding: 0;
            margin-bottom: var(--space-8);
        }
    }

    .search-bar input {
        width: 100%;
        height: var(--tap-target-min);
        padding: var(--space-2) var(--space-3);
        border: 1px solid var(--color-border-light);
        border-radius: var(--border-radius-md);
        font-size: var(--font-size-base);
    }

    .category-filters {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-2);
        margin: var(--space-4) 0;
    }

    .category-button {
        height: var(--tap-target-min);
        padding: var(--space-2) var(--space-4);
        border: 1px solid var(--color-border-light);
        border-radius: var(--border-radius-full);
        background: var(--color-card-bg-light);
        font-size: var(--font-size-sm);
        transition: all 0.2s ease;
    }

    @media (min-width: 768px) {
        .category-button {
            font-size: var(--font-size-base);
        }
    }

    .category-button.active {
        background: var(--color-accent-teal);
        color: white;
        border-color: var(--color-accent-teal);
    }

    /* No Results */
    .no-results {
        text-align: center;
        padding: var(--space-8) var(--space-4);
    }

    .no-results img {
        max-width: 160px;
        height: auto;
        margin: 0 auto var(--space-4);
        opacity: 0.7;
    }

    @media (min-width: 768px) {
        .no-results img {
            max-width: 200px;
        }
    }

    .no-results h3 {
        font-size: var(--font-size-xl);
        margin-bottom: var(--space-3);
    }

    .no-results p {
        font-size: var(--font-size-base);
        color: var(--color-text-light);
        opacity: 0.8;
        max-width: 400px;
        margin: 0 auto var(--space-4);
    }

    /* Pagination */
    .pagination-controls {
      display: flex;
      gap: 0.5em;
      justify-content: center;
      margin: 2em 0 1em 0;
    }
    .pagination-btn {
      background: var(--color-background-light);
      border: 1px solid var(--color-border-light);
      color: var(--color-text-light);
      border-radius: 6px;
      padding: 0.5em 1.1em;
      font-size: 1em;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.2s, color 0.2s, border 0.2s;
    }
    .pagination-btn.active, .pagination-btn:hover {
      background: var(--color-accent-teal);
      color: #fff;
      border-color: var(--color-accent-teal);
    }

    /* Mobile-friendly pagination */
    .pagination-controls {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: var(--space-2);
        padding: var(--space-6) var(--space-4);
    }

    .pagination-btn {
        min-width: var(--tap-target-min);
        height: var(--tap-target-min);
        padding: var(--space-2) var(--space-3);
        border: 1px solid var(--color-border-light);
        border-radius: var(--border-radius-md);
        background: var(--color-card-bg-light);
        font-size: var(--font-size-base);
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .pagination-btn.active {
        background: var(--color-accent-teal);
        color: white;
        border-color: var(--color-accent-teal);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .page-header h1 {
            font-size: 2.2em;
        }

        .search-controls {
            padding: 1.5rem;
        }

        .category-filters {
            gap: 0.5rem;
        }

        .category-button {
            font-size: 0.8em;
            padding: 0.5em 1em;
        }

        .trainer-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
    }

    /* Loading Skeleton Styles */
    .skeleton-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .skeleton-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 1.5rem;
        display: flex;
        gap: 1rem;
        animation: skeleton-pulse 1.5s ease-in-out infinite alternate;
    }

    .skeleton-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: skeleton-shimmer 1.5s infinite;
        flex-shrink: 0;
    }

    .skeleton-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .skeleton-line {
        height: 1rem;
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: skeleton-shimmer 1.5s infinite;
        border-radius: 4px;
    }

    .skeleton-title {
        height: 1.25rem;
        width: 70%;
    }

    .skeleton-subtitle {
        height: 1rem;
        width: 50%;
    }

    .skeleton-text {
        height: 0.875rem;
        width: 90%;
    }

    .skeleton-text.short {
        width: 60%;
    }

    /* Mobile-optimized loading states */
    #loading-skeleton {
        display: grid;
        gap: var(--space-4);
        grid-template-columns: 1fr;
        padding: 0 var(--space-4);
    }

    @media (min-width: 360px) {
        #loading-skeleton {
            grid-template-columns: repeat(2, 1fr);
            gap: var(--space-3);
        }
    }

    @media (min-width: 768px) {
        #loading-skeleton {
            grid-template-columns: repeat(3, 1fr);
            gap: var(--space-4);
            padding: 0;
        }
    }

    .skeleton-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: var(--border-radius-lg);
        padding: var(--space-3);
        height: 200px;
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    @media (min-width: 768px) {
        .skeleton-card {
            padding: var(--space-4);
            height: 240px;
        }
    }

    .skeleton-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(90deg, var(--color-border-light) 25%, #f0f0f0 50%, var(--color-border-light) 75%);
        background-size: 200% 100%;
        animation: skeleton-shimmer 1.5s infinite;
    }

    @media (min-width: 768px) {
        .skeleton-avatar {
            width: 80px;
            height: 80px;
        }
    }

    .skeleton-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .skeleton-line {
        height: 12px;
        border-radius: var(--border-radius-sm);
        background: linear-gradient(90deg, var(--color-border-light) 25%, #f0f0f0 50%, var(--color-border-light) 75%);
        background-size: 200% 100%;
        animation: skeleton-shimmer 1.5s infinite;
    }

    .skeleton-title {
        height: 20px;
        width: 70%;
    }

    .skeleton-subtitle {
        height: 16px;
        width: 50%;
    }

    .skeleton-text {
        height: 12px;
        width: 90%;
    }

    .skeleton-text.short {
        width: 60%;
    }

    @keyframes skeleton-shimmer {
        0% {
            background-position: -200% 0;
        }
        100% {
            background-position: 200% 0;
        }
    }

    @keyframes skeleton-pulse {
        0% {
            opacity: 1;
        }
        100% {
            opacity: 0.7;
        }
    }

    /* Dark mode skeleton */
    .dark-mode .skeleton-card {
        background: var(--color-card-bg-light);
        border-color: var(--color-border-light);
    }

    .dark-mode .skeleton-avatar,
    .dark-mode .skeleton-line {
        background: linear-gradient(90deg, #4a4a4a 25%, #3a3a3a 50%, #4a4a4a 75%);
        background-size: 200% 100%;
    }
</style>

