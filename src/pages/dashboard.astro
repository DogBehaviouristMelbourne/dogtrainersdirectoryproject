---
// src/pages/dashboard.astro
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Get Stripe publishable key from environment
const stripePublishableKey = import.meta.env.STRIPE_PUBLISHABLE_KEY;
---

<Layout title="Trainer Dashboard" description="Manage your trainer profile and subscription status.">
    <Header />
    
    <main id="main-content">
        <section class="dashboard-page">
            <div class="container">
                <div class="page-header">
                    <h1>Trainer Dashboard</h1>
                    <p class="page-subtitle">Manage your listing and subscription</p>
                </div>

                <!-- Loading State -->
                <div id="loading-state" class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>Loading your dashboard...</p>
                </div>

                <!-- Dashboard Content -->
                <div id="dashboard-content" class="dashboard-content" style="display: none;">
                    
                    <!-- Trainer Info -->
                    <section class="trainer-info-section">
                        <h2>Your Profile</h2>
                        <div class="trainer-info-card">
                            <div id="trainer-details">
                                <!-- Will be populated by JavaScript -->
                            </div>
                        </div>
                    </section>

                    <!-- Subscription Status -->
                    <section class="subscription-section">
                        <h2>Subscription Status</h2>
                        <div class="status-cards">
                            <div class="status-card" id="standard-status">
                                <h3>Standard Listing</h3>
                                <div class="status-badge" id="standard-badge">Loading...</div>
                                <div class="status-details" id="standard-details"></div>
                                <div class="status-actions" id="standard-actions"></div>
                            </div>
                            
                            <div class="status-card" id="premium-status">
                                <h3>Premium Features</h3>
                                <div class="status-badge" id="premium-badge">Loading...</div>
                                <div class="status-details" id="premium-details"></div>
                                <div class="status-actions" id="premium-actions"></div>
                            </div>
                        </div>
                    </section>

                    <!-- Quick Actions -->
                    <section class="quick-actions-section">
                        <h2>Quick Actions</h2>
                        <div class="action-cards">
                            <div class="action-card">
                                <h3>üìä View Your Listing</h3>
                                <p>See how your profile appears to potential clients</p>
                                <button class="button secondary" id="view-listing-btn">View Public Profile</button>
                            </div>
                            
                            <div class="action-card">
                                <h3>‚úèÔ∏è Update Profile</h3>
                                <p>Edit your services, pricing, and contact information</p>
                                <button class="button secondary" id="edit-profile-btn">Edit Profile</button>
                            </div>
                            
                            <div class="action-card">
                                <h3>üìà Upgrade Plans</h3>
                                <p>Explore premium features and subscription options</p>
                                <button class="button primary" id="upgrade-plans-btn">View Plans</button>
                            </div>
                        </div>
                    </section>
                </div>

                <!-- Error State -->
                <div id="error-state" class="error-state" style="display: none;">
                    <h2>‚ö†Ô∏è Unable to Load Dashboard</h2>
                    <p>We couldn't load your trainer information. Please check your trainer ID and try again.</p>
                    <div class="error-actions">
                        <input type="text" id="trainer-id-input" placeholder="Enter your Trainer ID" />
                        <button class="button primary" id="retry-btn">Retry</button>
                    </div>
                </div>
            </div>
        </section>
    </main>
    
    <Footer />
</Layout>

<script type="module" define:vars={{ stripePublishableKey }}>
// Plan: Create a trainer dashboard that shows current subscription status and provides upgrade options
// Implementation:
// 1. Get trainer ID from URL parameters or localStorage
// 2. Fetch trainer data from Supabase
// 3. Display current payment_status and premium_status
// 4. Show appropriate "Purchase Standard" or "Upgrade to Premium" buttons
// 5. Handle checkout flow integration
// Expected Results:
// - Trainers see their current subscription status
// - Appropriate purchase/upgrade buttons are displayed
// - Seamless integration with Stripe checkout flow

import { supabase } from '../lib/supabaseClient.js';

let currentTrainer = null;

// Get trainer ID from URL or prompt
function getTrainerId() {
    const urlParams = new URLSearchParams(window.location.search);
    let trainerId = urlParams.get('trainerId') || urlParams.get('trainer_id');
    
    if (!trainerId) {
        trainerId = localStorage.getItem('trainerId');
    }
    
    if (!trainerId) {
        trainerId = prompt('Enter your Trainer ID to access your dashboard:');
        if (trainerId) {
            localStorage.setItem('trainerId', trainerId);
        }
    }
    
    return trainerId;
}

// Fetch trainer data from Supabase
async function fetchTrainerData(trainerId) {
    try {
        const { data, error } = await supabase
            .from('trainers')
            .select('*')
            .eq('id', trainerId)
            .single();
            
        if (error) {
            console.error('Error fetching trainer:', error);
            return null;
        }
        
        return data;
    } catch (error) {
        console.error('Error in fetchTrainerData:', error);
        return null;
    }
}

// Display trainer information
function displayTrainerInfo(trainer) {
    const detailsContainer = document.getElementById('trainer-details');
    detailsContainer.innerHTML = `
        <div class="trainer-header">
            <h3>${trainer.name || 'Trainer Profile'}</h3>
            <p class="trainer-id">ID: ${trainer.id}</p>
        </div>
        <div class="trainer-meta">
            <div class="meta-item">
                <strong>Location:</strong> ${trainer.suburb || trainer.location || 'Not specified'}
            </div>
            <div class="meta-item">
                <strong>Services:</strong> ${(trainer.categories || []).join(', ') || 'Not specified'}
            </div>
            <div class="meta-item">
                <strong>Phone:</strong> ${trainer.phone || 'Not provided'}
            </div>
            <div class="meta-item">
                <strong>Email:</strong> ${trainer.email || 'Not provided'}
            </div>
        </div>
    `;
}

// Display subscription status
function displaySubscriptionStatus(trainer) {
    const paymentStatus = trainer.payment_status || 'pending';
    const premiumStatus = trainer.premium_status || 'inactive';
    
    // Standard Status
    const standardBadge = document.getElementById('standard-badge');
    const standardDetails = document.getElementById('standard-details');
    const standardActions = document.getElementById('standard-actions');
    
    if (paymentStatus === 'paid_standard') {
        standardBadge.textContent = '‚úÖ Active';
        standardBadge.className = 'status-badge active';
        standardDetails.innerHTML = `
            <p>Your standard listing is active.</p>
            ${trainer.standard_start_date ? `<p><small>Started: ${new Date(trainer.standard_start_date).toLocaleDateString()}</small></p>` : ''}
            ${trainer.standard_end_date ? `<p><small>Expires: ${new Date(trainer.standard_end_date).toLocaleDateString()}</small></p>` : ''}
        `;
        standardActions.innerHTML = '<button class="button small secondary">Manage Subscription</button>';
    } else {
        standardBadge.textContent = '‚ùå Inactive';
        standardBadge.className = 'status-badge inactive';
        standardDetails.innerHTML = '<p>Purchase a standard listing to appear in search results.</p>';
        standardActions.innerHTML = `
            <button class="button primary purchase-standard-btn" data-price-id="price_1RX0T2DEY1RddZfIATD9orLs">
                Purchase Standard - $79/yr
            </button>
        `;
    }
    
    // Premium Status
    const premiumBadge = document.getElementById('premium-badge');
    const premiumDetails = document.getElementById('premium-details');
    const premiumActions = document.getElementById('premium-actions');
    
    if (premiumStatus === 'active') {
        premiumBadge.textContent = '‚≠ê Active';
        premiumBadge.className = 'status-badge premium';
        premiumDetails.innerHTML = `
            <p>Your premium features are active. You appear first in search results!</p>
            ${trainer.premium_start_date ? `<p><small>Started: ${new Date(trainer.premium_start_date).toLocaleDateString()}</small></p>` : ''}
            ${trainer.premium_end_date ? `<p><small>Next billing: ${new Date(trainer.premium_end_date).toLocaleDateString()}</small></p>` : ''}
        `;
        premiumActions.innerHTML = '<button class="button small secondary">Manage Premium</button>';
    } else if (paymentStatus === 'paid_standard') {
        premiumBadge.textContent = 'üöÄ Available';
        premiumBadge.className = 'status-badge available';
        premiumDetails.innerHTML = '<p>Upgrade to premium for top placement and featured badge.</p>';
        premiumActions.innerHTML = `
            <button class="button primary upgrade-premium-btn" data-price-id="price_1RX0QxDEY1RddZfIoRdn84vS">
                Upgrade to Premium - $49/mo
            </button>
        `;
    } else {
        premiumBadge.textContent = 'üîí Requires Standard';
        premiumBadge.className = 'status-badge locked';
        premiumDetails.innerHTML = '<p>Premium features require an active standard listing.</p>';
        premiumActions.innerHTML = '<button class="button secondary disabled" disabled>Purchase Standard First</button>';
    }
}

// Handle checkout button clicks
async function setupCheckoutHandlers(trainerId) {
    // Load Stripe.js
    const stripe = await loadStripe(stripePublishableKey);
    
    if (!stripe) {
        console.error('Failed to load Stripe');
        return;
    }
    
    document.addEventListener('click', async (e) => {
        if (e.target.classList.contains('purchase-standard-btn') || e.target.classList.contains('upgrade-premium-btn')) {
            e.preventDefault();
            
            const priceId = e.target.dataset.priceId;
            const originalText = e.target.textContent;
            
            e.target.disabled = true;
            e.target.textContent = 'Creating checkout session...';
            
            try {
                const response = await fetch('/api/create-checkout-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        priceId: priceId,
                        trainerId: trainerId
                    })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to create checkout session');
                }
                
                if (data.sessionId) {
                    e.target.textContent = 'Redirecting to payment...';
                    
                    const { error } = await stripe.redirectToCheckout({
                        sessionId: data.sessionId
                    });
                    
                    if (error) {
                        throw new Error(error.message);
                    }
                } else {
                    throw new Error('No session ID returned from server');
                }
                
            } catch (error) {
                console.error('Error creating checkout session:', error);
                alert(`Error: ${error.message}`);
                e.target.disabled = false;
                e.target.textContent = originalText;
            }
        }
    });
}

// Load Stripe.js from CDN
function loadStripe(publishableKey) {
    return new Promise((resolve) => {
        if (window.Stripe) {
            resolve(window.Stripe(publishableKey));
            return;
        }
        
        const script = document.createElement('script');
        script.src = 'https://js.stripe.com/v3/';
        script.onload = () => {
            resolve(window.Stripe(publishableKey));
        };
        script.onerror = () => {
            resolve(null);
        };
        document.head.appendChild(script);
    });
}

// Initialize dashboard
async function initDashboard() {
    const loadingState = document.getElementById('loading-state');
    const dashboardContent = document.getElementById('dashboard-content');
    const errorState = document.getElementById('error-state');
    
    const trainerId = getTrainerId();
    
    if (!trainerId) {
        loadingState.style.display = 'none';
        errorState.style.display = 'block';
        return;
    }
    
    try {
        const trainer = await fetchTrainerData(trainerId);
        
        if (!trainer) {
            throw new Error('Trainer not found');
        }
        
        currentTrainer = trainer;
        
        displayTrainerInfo(trainer);
        displaySubscriptionStatus(trainer);
        setupCheckoutHandlers(trainerId);
        
        // Setup other button handlers
        document.getElementById('view-listing-btn').addEventListener('click', () => {
            window.open(`/trainers/${trainerId}`, '_blank');
        });
        
        document.getElementById('edit-profile-btn').addEventListener('click', () => {
            window.location.href = `/claim?id=${trainerId}`;
        });
        
        document.getElementById('upgrade-plans-btn').addEventListener('click', () => {
            window.location.href = `/premium?trainerId=${trainerId}`;
        });
        
        loadingState.style.display = 'none';
        dashboardContent.style.display = 'block';
        
    } catch (error) {
        console.error('Error loading dashboard:', error);
        loadingState.style.display = 'none';
        errorState.style.display = 'block';
    }
}

// Handle retry button
document.getElementById('retry-btn').addEventListener('click', () => {
    const trainerIdInput = document.getElementById('trainer-id-input');
    const trainerId = trainerIdInput.value.trim();
    
    if (trainerId) {
        localStorage.setItem('trainerId', trainerId);
        window.location.reload();
    }
});

// Handle successful payment redirect
const urlParams = new URLSearchParams(window.location.search);
const sessionId = urlParams.get('session_id');

if (sessionId) {
    // Show success message and refresh data
    setTimeout(() => {
        alert('üéâ Payment successful! Your subscription has been activated.');
        // Remove session_id from URL and reload
        const newUrl = window.location.pathname + (window.location.search.replace(/[?&]session_id=[^&]+/, '').replace(/^&/, '?') || '');
        window.history.replaceState({}, document.title, newUrl);
        window.location.reload();
    }, 1000);
}

// Start the dashboard
document.addEventListener('DOMContentLoaded', initDashboard);
</script>

<style>
    .dashboard-page {
        padding: 3rem 0;
        min-height: 70vh;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-header h1 {
        font-size: 2.5em;
        color: var(--color-text-light);
        margin-bottom: 1rem;
    }

    .page-subtitle {
        font-size: 1.2em;
        color: var(--color-text-light);
        opacity: 0.8;
    }

    /* Loading State */
    .loading-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid var(--color-border-light);
        border-top-color: var(--color-accent-teal);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Dashboard Content */
    .dashboard-content section {
        margin-bottom: 3rem;
    }

    .dashboard-content h2 {
        font-size: 1.8em;
        margin-bottom: 1.5rem;
        color: var(--color-text-light);
    }

    /* Trainer Info */
    .trainer-info-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow-sm);
    }

    .trainer-header h3 {
        color: var(--color-text-light);
        margin-bottom: 0.5rem;
    }

    .trainer-id {
        color: var(--color-text-light);
        opacity: 0.6;
        font-size: 0.9em;
        margin-bottom: 1.5rem;
    }

    .trainer-meta {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .meta-item {
        color: var(--color-text-light);
    }

    /* Status Cards */
    .status-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .status-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow-sm);
    }

    .status-card h3 {
        margin-bottom: 1rem;
        color: var(--color-text-light);
    }

    .status-badge {
        display: inline-block;
        padding: 0.5em 1em;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9em;
        margin-bottom: 1rem;
    }

    .status-badge.active {
        background: #e8f5e8;
        color: #2d7d32;
    }

    .status-badge.inactive {
        background: #ffebee;
        color: #c62828;
    }

    .status-badge.premium {
        background: linear-gradient(135deg, #ffd700, #ffb300);
        color: #333;
    }

    .status-badge.available {
        background: #e3f2fd;
        color: #1565c0;
    }

    .status-badge.locked {
        background: #f5f5f5;
        color: #666;
    }

    .status-details {
        margin-bottom: 1.5rem;
        color: var(--color-text-light);
    }

    .status-details p {
        margin-bottom: 0.5rem;
    }

    .status-details small {
        opacity: 0.7;
    }

    /* Action Cards */
    .action-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 2rem;
    }

    .action-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow-sm);
        transition: transform 0.2s ease;
    }

    .action-card:hover {
        transform: translateY(-2px);
    }

    .action-card h3 {
        margin-bottom: 1rem;
        color: var(--color-text-light);
    }

    .action-card p {
        margin-bottom: 1.5rem;
        color: var(--color-text-light);
        opacity: 0.8;
    }

    /* Error State */
    .error-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .error-state h2 {
        color: var(--color-text-light);
        margin-bottom: 1rem;
    }

    .error-state p {
        color: var(--color-text-light);
        opacity: 0.8;
        margin-bottom: 2rem;
    }

    .error-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    .error-actions input {
        padding: 0.8rem 1rem;
        border: 1px solid var(--color-border-light);
        border-radius: 6px;
        font-size: 1rem;
        min-width: 200px;
    }

    /* Button Variations */
    .button.small {
        padding: 0.5em 1em;
        font-size: 0.9em;
    }

    .button.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .status-cards {
            grid-template-columns: 1fr;
        }
        
        .action-cards {
            grid-template-columns: 1fr;
        }
        
        .error-actions {
            flex-direction: column;
        }
        
        .error-actions input {
            min-width: auto;
            width: 100%;
            max-width: 300px;
        }
    }
</style>
