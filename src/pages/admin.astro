---
import Layout from '../layouts/Layout.astro'
---

<Layout title="Admin Dashboard">
  <section class="container">
    <div id="admin-content">
      <h1>Loading...</h1>
      <p>Checking authentication...</p>
    </div>
  </section>

  <script type="module">
    async function initAdmin() {
      try {
        console.log('Starting admin initialization...')
        
        // Import Supabase from CDN
        const { createClient } = await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm')
        
        console.log('Supabase imported successfully')
        
        const supabaseUrl = 'https://wxvjxzgphtqibgtghpte.supabase.co'
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4dmp4emdwaHRxaWJndGdocHRlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI2MDM5NjQsImV4cCI6MjA0ODE3OTk2NH0.LGCZhk8GlvTPATPyWxfYUoOq19fJpNfv8qm5qJMlxZg'
        
        const supabase = createClient(supabaseUrl, supabaseAnonKey)
        
        console.log('Supabase client created')

        // Get the admin key from URL parameters
        const urlParams = new URLSearchParams(window.location.search)
        const providedKey = urlParams.get('key')
        const expectedKey = 'dogtrainer2025admin'
        
        const adminContent = document.getElementById('admin-content')
        
        console.log('Client-side URL:', window.location.href)
        console.log('Client-side search:', window.location.search)
        console.log('Provided key:', providedKey)
        console.log('Expected key:', expectedKey)
        console.log('Keys match:', providedKey === expectedKey)

        if (providedKey === expectedKey) {
          console.log('Authentication successful, loading dashboard...')
          await loadAdminDashboard()
        } else {
          console.log('Authentication failed, showing access denied')
          showAccessDenied()
        }

        async function loadAdminDashboard() {
          try {
            adminContent.innerHTML = '<h1>Loading admin dashboard...</h1>'
            
            // Plan: Render a summary panel that shows, for each suburb × category,
            // how many premium slots are used out of 10 (using the `premium_slot_usage` view).
            // Then list all trainers below with an Activate/Deactivate Premium toggle.
            // Implementation:
            // 1. Fetch from supabase.from('premium_slot_usage').
            // 2. Render a table or list of suburb, category, and "active_premiums/10".
            // 3. For each trainer row, render a button that toggles premium_status in 'trainers'.
            // Expected Results:
            // - A summary panel with lines like "Richmond — Puppy Training: 0/10 used".
            // - Trainer list rows each have a toggle button updating premium_status in Supabase.
            
            console.log('Fetching premium slot usage...')
            const { data: usage, error: usageError } = await supabase
              .from('premium_slot_usage')
              .select('*')
            
            console.log('Fetching all trainers...')
            const { data: trainers, error: trainersError } = await supabase
              .from('trainers')
              .select('*')
              .order('name')
            
            console.log('Fetching pending trainers...')
            const { data: pending, error: pendingError } = await supabase
              .from('pending_trainers')
              .select('*')

            console.log('Supabase responses:', { usage, usageError, trainers, trainersError, pending, pendingError })

            // Handle individual errors - don't fail completely if only one query fails
            if (trainersError) {
              console.error('Error fetching trainers:', trainersError)
              adminContent.innerHTML = `
                <h1>Error</h1>
                <p>Failed to load trainers: ${trainersError.message}</p>
                <p>Check the browser console for more details.</p>
              `
              return
            }

            if (pendingError) {
              console.error('Error fetching pending trainers:', pendingError)
              // Don't fail completely, just log the error
              console.log('Continuing without pending trainers data')
            }

            if (usageError) {
              console.error('Error fetching usage data:', usageError)
              // Don't fail completely, just log the error
              console.log('Continuing without usage data')
            }

            // Ensure we have fallback data
            const safeUsage = usage || []
            const safeTrainers = trainers || []
            const safePending = pending || []

            console.log('Data counts:', { 
              usage: safeUsage.length, 
              trainers: safeTrainers.length, 
              pending: safePending.length 
            })

            // Render the complete admin dashboard
            renderAdminDashboard(safeUsage, safeTrainers, safePending)
            
          } catch (err) {
            console.error('Error in loadAdminDashboard:', err)
            adminContent.innerHTML = `
              <h1>Error</h1>
              <p>An unexpected error occurred: ${err.message}</p>
              <p>Check the browser console for more details.</p>
            `
          }
        }
        
        function renderAdminDashboard(usage, trainers, pending) {
          console.log('Rendering complete admin dashboard...')
          
          // Render premium slot usage summary
          const usageHtml = usage && usage.length > 0 ? 
            usage.map(({ suburb, category, active_premiums }) => `
              <li style="padding: 0.5rem; border-bottom: 1px solid #eee;">
                <strong>${suburb}</strong> — ${category}: <span style="color: ${active_premiums >= 8 ? '#dc3545' : active_premiums >= 5 ? '#ffc107' : '#28a745'}">${active_premiums}/10 used</span>
              </li>
            `).join('') : 
            `<li style="padding: 1rem; text-align: center; color: #666; background: #f8f9fa; border-radius: 8px;">
              <strong>No premium slots in use yet</strong><br>
              <small>Activate premium status for trainers below to see usage by suburb and category</small>
            </li>`
          
          // Render trainers table
          const trainersHtml = trainers && trainers.length > 0 ?
            trainers.map(trainer => `
              <tr>
                <td style="padding: 0.5rem; border-bottom: 1px solid #eee;">${trainer.name}</td>
                <td style="padding: 0.5rem; border-bottom: 1px solid #eee;">${trainer.suburb || 'N/A'}</td>
                <td style="padding: 0.5rem; border-bottom: 1px solid #eee; font-size: 0.8em;">${(trainer.categories || []).join(', ') || 'None'}</td>
                <td style="padding: 0.5rem; border-bottom: 1px solid #eee;">
                  <span style="padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8em; background: ${trainer.premium_status === 'active' ? '#d4edda' : '#f8d7da'}; color: ${trainer.premium_status === 'active' ? '#155724' : '#721c24'};">
                    ${trainer.premium_status || 'inactive'}
                  </span>
                </td>
                <td style="padding: 0.5rem; border-bottom: 1px solid #eee;">
                  <button onclick="togglePremium('${trainer.id}', '${trainer.premium_status || 'inactive'}')" 
                          style="background: ${trainer.premium_status === 'active' ? '#dc3545' : '#28a745'}; color: white; border: none; padding: 0.3rem 0.6rem; border-radius: 4px; cursor: pointer; font-size: 0.8em;">
                    ${trainer.premium_status === 'active' ? 'Deactivate' : 'Activate'} Premium
                  </button>
                </td>
              </tr>
            `).join('') : '<tr><td colspan="5" style="padding: 1rem; text-align: center; color: #666;">No trainers found</td></tr>'
          
          // Render pending trainers
          const pendingHtml = pending && pending.length > 0 ? 
            pending.map(trainer => `
              <li class="pending-card">
                <h3>${trainer.name || 'No name provided'}</h3>
                <p><strong>Suburb:</strong> ${trainer.suburb || 'Not specified'}</p>
                <p><strong>Email:</strong> ${trainer.email || 'Not provided'}</p>
                ${trainer.phone ? `<p><strong>Phone:</strong> ${trainer.phone}</p>` : ''}
                ${trainer.website ? `<p><strong>Website:</strong> ${trainer.website}</p>` : ''}
                <p><strong>Description:</strong> ${trainer.description || 'No description provided'}</p>
                ${trainer.match_tags && trainer.match_tags.length > 0 ? `<p><strong>Tags:</strong> ${trainer.match_tags.join(', ')}</p>` : ''}
                ${trainer.categories && trainer.categories.length > 0 ? `<p><strong>Categories:</strong> ${trainer.categories.join(', ')}</p>` : ''}
                ${trainer.profile_image ? `<p><strong>Profile Image:</strong> <img src="${trainer.profile_image}" alt="Profile" style="max-width: 100px; height: auto;" /></p>` : ''}
                ${trainer.why_choose_me ? `<p><strong>Why Choose Me:</strong> ${trainer.why_choose_me}</p>` : ''}
                ${trainer.social_links ? `<p><strong>Social Links:</strong> ${Object.entries(trainer.social_links).map(([platform, url]) => `${platform}: ${url}`).join(', ')}</p>` : ''}
                <p><strong>Submitted:</strong> ${new Date(trainer.created_at).toLocaleDateString()}</p>
                <div class="action-buttons">
                  <button class="approve-btn" onclick="approveTrainer('${trainer.id}')">✅ Approve</button>
                  <button class="reject-btn" onclick="rejectTrainer('${trainer.id}')">❌ Reject</button>
                </div>
              </li>
            `).join('') : '<li style="padding: 1rem; text-align: center; color: #666;">No pending submissions</li>'

          adminContent.innerHTML = `
            <div style="margin-bottom: 2rem;">
              <h1>Admin Dashboard</h1>
              <p>Manage premium slots and trainer submissions</p>
            </div>
            
            <div style="display: grid; gap: 2rem; margin-bottom: 2rem;">
              <section style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h2 style="margin-bottom: 1rem; color: #333;">Premium Slot Usage</h2>
                <ul style="list-style: none; padding: 0; margin: 0;">
                  ${usageHtml}
                </ul>
              </section>
              
              <section style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h2 style="margin-bottom: 1rem; color: #333;">All Trainers (${trainers ? trainers.length : 0})</h2>
                <div style="overflow-x: auto;">
                  <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                      <tr style="background: #f8f9fa;">
                        <th style="padding: 0.75rem; text-align: left; border-bottom: 2px solid #dee2e6;">Name</th>
                        <th style="padding: 0.75rem; text-align: left; border-bottom: 2px solid #dee2e6;">Suburb</th>
                        <th style="padding: 0.75rem; text-align: left; border-bottom: 2px solid #dee2e6;">Categories</th>
                        <th style="padding: 0.75rem; text-align: left; border-bottom: 2px solid #dee2e6;">Premium Status</th>
                        <th style="padding: 0.75rem; text-align: left; border-bottom: 2px solid #dee2e6;">Action</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${trainersHtml}
                    </tbody>
                  </table>
                </div>
              </section>
              
              <section style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h2 style="margin-bottom: 1rem; color: #333;">Pending Submissions (${pending ? pending.length : 0})</h2>
                <ul style="list-style: none; padding: 0;">
                  ${pendingHtml}
                </ul>
                <div style="margin-top: 1rem; padding: 1rem; background: #f0f0f0; border-radius: 4px;">
                  <h4>Quick Actions:</h4>
                  <button onclick="createTestSubmission()" style="background: #007acc; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer; margin-right: 0.5rem;">Create Test Submission</button>
                  <button onclick="setupDatabase()" style="background: #4CAF50; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Setup Database Tables</button>
                </div>
              </section>
            </div>
          `
        }

        // Global function for toggling premium status
        window.togglePremium = async function(id, currentStatus) {
          const newStatus = currentStatus === 'active' ? 'inactive' : 'active'
          
          if (!confirm(`${newStatus === 'active' ? 'Activate' : 'Deactivate'} premium status for this trainer?`)) return
          
          try {
            console.log('Toggling premium status:', id, 'from', currentStatus, 'to', newStatus)
            
            const { error } = await supabase
              .from('trainers')
              .update({ premium_status: newStatus })
              .eq('id', id)

            if (error) {
              alert('Failed to update premium status: ' + error.message)
              return
            }

            alert(`Premium status ${newStatus === 'active' ? 'activated' : 'deactivated'} successfully!`)
            
            // Reload the dashboard to refresh both the usage stats and trainer list
            await loadAdminDashboard()
          } catch (err) {
            console.error('Error toggling premium status:', err)
            alert('Error updating premium status: ' + err.message)
          }
        }

        function showAccessDenied() {
          adminContent.innerHTML = `
            <h1>Access Denied</h1>
            <p>You must supply a valid admin key to access this page.</p>
            <p>Usage: <code>/admin?key=your-admin-key</code></p>
            
            <div style="background: #f0f0f0; padding: 1rem; margin: 1rem 0; border-radius: 4px;">
              <h3>Debug Info:</h3>
              <p><strong>Current URL:</strong> ${window.location.href}</p>
              <p><strong>Search params:</strong> ${window.location.search || 'NONE'}</p>
              <p><strong>Provided Key:</strong> ${providedKey || 'NOT PROVIDED'}</p>
              <p><strong>Expected Key:</strong> ${expectedKey}</p>
              <p><strong>Keys Match:</strong> ${providedKey === expectedKey ? 'YES' : 'NO'}</p>
              
              <h4>Try this:</h4>
              <p>Copy this URL and paste it in your address bar:</p>
              <input type="text" value="${window.location.origin}/admin?key=${expectedKey}" style="width: 100%; padding: 0.5rem; margin: 0.5rem 0;" readonly onclick="this.select()" />
            </div>
          `
        }

        // Global functions for approve/reject buttons
        window.approveTrainer = async function(id) {
          if (!confirm('Approve this trainer submission?')) return
          
          try {
            console.log('Approving trainer:', id)
            
            // Get the pending trainer data
            const { data: trainerData, error: fetchError } = await supabase
              .from('pending_trainers')
              .select('*')
              .eq('id', id)
              .single()

            if (fetchError || !trainerData) {
              alert('Failed to fetch trainer data: ' + (fetchError?.message || 'Not found'))
              return
            }

            // Generate slug from name
            const slug = trainerData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '')

            // Insert into trainers table
            const { error: insertError } = await supabase.from('trainers').insert({
              name: trainerData.name,
              suburb: trainerData.suburb,
              email: trainerData.email,
              phone: trainerData.phone,
              website: trainerData.website,
              description: trainerData.description,
              match_tags: trainerData.match_tags,
              categories: trainerData.categories,
              profile_image: trainerData.profile_image,
              why_choose_me: trainerData.why_choose_me,
              social_links: trainerData.social_links,
              slug: slug,
              status: 'approved'
            })

            if (insertError) {
              alert('Failed to approve trainer: ' + insertError.message)
              return
            }

            // Remove from pending table
            const { error: deleteError } = await supabase
              .from('pending_trainers')
              .delete()
              .eq('id', id)

            if (deleteError) {
              alert('Trainer approved but failed to remove from pending: ' + deleteError.message)
            } else {
              alert('Trainer approved successfully!')
            }

            // Reload the dashboard
            await loadAdminDashboard()
          } catch (err) {
            console.error('Error approving trainer:', err)
            alert('Error approving trainer: ' + err.message)
          }
        }

        window.rejectTrainer = async function(id) {
          if (!confirm('Are you sure you want to reject and delete this trainer submission?')) return
          
          try {
            console.log('Rejecting trainer:', id)
            
            const { error } = await supabase
              .from('pending_trainers')
              .delete()
              .eq('id', id)

            if (error) {
              alert('Failed to reject trainer: ' + error.message)
            } else {
              alert('Trainer submission rejected.')
              await loadAdminDashboard()
            }
          } catch (err) {
            console.error('Error rejecting trainer:', err)
            alert('Error rejecting trainer: ' + err.message)
          }
        }

        window.createTestSubmission = async function() {
          try {
            console.log('Creating test submission...')
            
            // First, let's check what columns exist in the table
            const { data: existingData, error: checkError } = await supabase
              .from('pending_trainers')
              .select('*')
              .limit(1)
            
            console.log('Table check result:', { existingData, checkError })
            
            // Simple test data that should work with basic table structure
            const testData = {
              name: 'Test Dog Trainer',
              suburb: 'Melbourne CBD',
              email: 'test@example.com',
              description: 'Professional dog trainer specializing in puppy training and obedience. Years of experience helping Melbourne dogs and their owners.'
            }

            const { data, error } = await supabase
              .from('pending_trainers')
              .insert(testData)
              .select()

            if (error) {
              alert('Failed to create test submission: ' + error.message)
              console.error('Insert error:', error)
              console.log('Available columns might be limited. Try creating the table first or check your database schema.')
            } else {
              alert('Test submission created successfully!')
              console.log('Test submission created:', data)
              await loadAdminDashboard()
            }
          } catch (err) {
            console.error('Error creating test submission:', err)
            alert('Error creating test submission: ' + err.message)
          }
        }

        window.setupDatabase = async function() {
          if (!confirm('This will create the necessary database tables. Continue?')) return
          
          try {
            console.log('Setting up database tables...')
            
            // Create pending_trainers table
            const createTableSQL = `
              CREATE TABLE IF NOT EXISTS pending_trainers (
                id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
                name TEXT NOT NULL,
                suburb TEXT NOT NULL,
                email TEXT NOT NULL,
                phone TEXT,
                website TEXT,
                description TEXT NOT NULL,
                categories TEXT[],
                match_tags TEXT[],
                profile_image TEXT,
                why_choose_me TEXT,
                social_links JSONB,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
              );
            `
            
            const { data, error } = await supabase.rpc('exec_sql', { sql: createTableSQL })
            
            if (error) {
              alert('Database setup failed: ' + error.message + '\\n\\nPlease run the SQL script in database/setup.sql manually in your Supabase SQL Editor.')
              console.error('Database setup error:', error)
            } else {
              alert('Database tables created successfully! You can now create test submissions.')
              console.log('Database setup successful:', data)
            }
          } catch (err) {
            console.error('Error setting up database:', err)
            alert('Error setting up database: ' + err.message + '\\n\\nPlease run the SQL script in database/setup.sql manually in your Supabase SQL Editor.')
          }
        }

      } catch (error) {
        console.error('Failed to initialize admin:', error)
        document.getElementById('admin-content').innerHTML = `
          <h1>Initialization Error</h1>
          <p>Failed to load admin dashboard: ${error.message}</p>
          <p>Check the browser console for more details.</p>
        `
      }
    }

    // Initialize when page loads
    initAdmin()
  </script>

  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    h1 {
      color: var(--primary-color);
      margin-bottom: 2rem;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    .pending-card {
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      background: #fefefe;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .pending-card h2 {
      color: var(--primary-color);
      margin-bottom: 1rem;
      font-size: 1.5rem;
    }

    .pending-card p {
      margin-bottom: 0.5rem;
      line-height: 1.5;
    }

    .pending-card strong {
      color: var(--text-color);
    }

    .action-buttons {
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
    }

    .approve-btn, .reject-btn {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.3s ease;
    }

    .approve-btn {
      background-color: #4CAF50;
      color: white;
    }

    .approve-btn:hover {
      background-color: #45a049;
    }

    .reject-btn {
      background-color: #f44336;
      color: white;
    }

    .reject-btn:hover {
      background-color: #da190b;
    }

    code {
      background-color: #f4f4f4;
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
      font-family: 'Courier New', monospace;
    }
  </style>
</Layout>
