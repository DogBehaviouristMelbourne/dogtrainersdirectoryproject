---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Safely get environment variables with fallbacks to prevent build errors
const stripeKey = import.meta.env.STRIPE_PUBLISHABLE_KEY || '';
---

<Layout title="Premium Trainer Listing" description="Upgrade to a featured listing and get more visibility for your dog training services in Melbourne.">
    <Header />
    
    <main id="main-content">
        <section class="premium-page">
            <div class="container">
                <div class="page-header">
                    <h1>Get Featured & Stand Out</h1>
                    <p class="page-subtitle">Premium listings appear first in search results and get up to 5x more visibility</p>
                </div>

                <!-- Benefits Section -->
                <section class="benefits-section">
                    <h2>Why Go Premium?</h2>
                    <div class="benefits-grid">
                        <div class="benefit-card">
                            <div class="benefit-icon">üîù</div>
                            <h3>Top Placement</h3>
                            <p>Your listing appears first in all relevant searches and category filters</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon">‚≠ê</div>
                            <h3>Featured Badge</h3>
                            <p>Stand out with an eye-catching "Featured" badge on your trainer card</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon">üìà</div>
                            <h3>5x More Views</h3>
                            <p>Premium listings receive significantly more profile views and inquiries</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon">üéØ</div>
                            <h3>Premium Styling</h3>
                            <p>Enhanced card design with gold border and gradient background</p>
                        </div>
                    </div>
                </section>

                <!-- Pricing Section -->
                <section class="pricing-section">
                    <h2>Two-Tier Subscription Model</h2>
                    <div class="pricing-hierarchy">
                        <div class="hierarchy-note">
                            <p><strong>Step 1:</strong> Start with Standard listing, then <strong>Step 2:</strong> Add Premium features</p>
                        </div>
                    </div>
                    
                    <!-- Loading State -->
                    <div id="subscription-loading" class="loading-state">
                        <p>Loading your subscription status...</p>
                    </div>

                    <!-- Plans Container -->
                    <div id="plans-container" class="pricing-grid" style="display: none;">
                        <!-- Standard Plan (Always First) -->
                        <div id="standard-plan" class="pricing-card popular">
                            <div class="popular-badge">Required First</div>
                            <div class="plan-header">
                                <h3>Standard Annual Listing</h3>
                                <div class="price">
                                    <span class="currency">$</span>
                                    <span class="amount">79</span>
                                    <span class="period">/year</span>
                                </div>
                                <div class="savings">Foundation Plan</div>
                            </div>
                            <ul class="plan-features">
                                <li>‚úÖ Professional directory listing</li>
                                <li>‚úÖ Searchable by location & category</li>
                                <li>‚úÖ Basic analytics dashboard</li>
                                <li>‚úÖ Priority support</li>
                            </ul>
                            <button id="standard-button" class="button primary plan-button" data-plan="standard" data-price-id="price_1RX0T2DEY1RddZfIATD9orLs">
                                Get Standard Listing
                            </button>
                            <div id="standard-status" class="plan-status" style="display: none;"></div>
                        </div>

                        <!-- Premium Upgrade (Conditional) -->
                        <div id="premium-plan" class="pricing-card" style="display: none;">
                            <div class="upgrade-badge">Upgrade</div>
                            <div class="plan-header">
                                <h3>Premium Monthly Features</h3>
                                <div class="price">
                                    <span class="currency">$</span>
                                    <span class="amount">49</span>
                                    <span class="period">/month</span>
                                </div>
                                <div class="savings">Add to Standard</div>
                            </div>
                            <ul class="plan-features">
                                <li>‚úÖ Top placement in search results</li>
                                <li>‚úÖ Featured badge</li>
                                <li>‚úÖ Premium card styling</li>
                                <li>‚úÖ Cancel anytime</li>
                            </ul>
                            <button id="premium-button" class="button primary plan-button" data-plan="premium" data-price-id="price_1RX0QxDEY1RddZfIoRdn84vS">
                                Upgrade to Premium
                            </button>
                            <div id="premium-status" class="plan-status" style="display: none;"></div>
                        </div>

                        <!-- Premium Unavailable Message -->
                        <div id="premium-unavailable" class="pricing-card unavailable" style="display: none;">
                            <div class="unavailable-badge">Requires Standard</div>
                            <div class="plan-header">
                                <h3>Premium Monthly Features</h3>
                                <div class="price">
                                    <span class="currency">$</span>
                                    <span class="amount">49</span>
                                    <span class="period">/month</span>
                                </div>
                                <div class="savings">Available after Standard</div>
                            </div>
                            <ul class="plan-features">
                                <li>‚≠ê Top placement in search results</li>
                                <li>‚≠ê Featured badge</li>
                                <li>‚≠ê Premium card styling</li>
                                <li>‚≠ê Cancel anytime</li>
                            </ul>
                            <button class="button disabled" disabled>
                                Purchase Standard First
                            </button>
                            <p class="upgrade-note">You must have an active Standard subscription to access Premium features</p>
                        </div>

                        <!-- Premium Active Status -->
                        <div id="premium-active" class="pricing-card active" style="display: none;">
                            <div class="active-badge">‚úÖ Active</div>
                            <div class="plan-header">
                                <h3>Premium Features Active</h3>
                                <div class="status-text">Your premium features are active</div>
                            </div>
                            <ul class="plan-features">
                                <li>‚≠ê Featured placement active</li>
                                <li>‚≠ê Premium styling applied</li>
                                <li>‚≠ê Advanced analytics available</li>
                                <li>‚≠ê Maximum visibility</li>
                            </ul>
                            <button id="manage-premium-button" class="button secondary">
                                Manage Premium
                            </button>
                        </div>
                    </div>
                </section>

                <!-- FAQ Section -->
                <section class="faq-section">
                    <h2>Frequently Asked Questions</h2>
                    <div class="faq-grid">
                        <div class="faq-item">
                            <h3>How quickly will my listing be featured?</h3>
                            <p>Your listing will be featured immediately after successful payment processing, typically within 5 minutes.</p>
                        </div>
                        <div class="faq-item">
                            <h3>Can I cancel my subscription?</h3>
                            <p>Yes! You can cancel anytime. Your listing will remain featured until the end of your current billing period.</p>
                        </div>
                        <div class="faq-item">
                            <h3>What payment methods do you accept?</h3>
                            <p>We accept all major credit cards, debit cards, and digital wallets through our secure Stripe payment processing.</p>
                        </div>
                        <div class="faq-item">
                            <h3>How many featured spots are available?</h3>
                            <p>We limit featured listings to 10 per suburb/category combination to ensure quality and visibility for all premium members.</p>
                        </div>
                    </div>
                </section>

                <!-- CTA Section -->
                <section class="cta-section">
                    <div class="cta-content">
                        <h2>Ready to Get More Clients?</h2>
                        <p>Join hundreds of successful trainers who've boosted their business with premium listings</p>
                        <a href="#pricing-section" class="button primary large">Choose Your Plan</a>
                    </div>
                </section>
            </div>
        </section>
    </main>
    
    <Footer />
</Layout>

<!-- Load Stripe.js from CDN -->
<script src="https://js.stripe.com/v3/"></script>

<!-- Simple basic script to pass the server variable to client -->
<script is:inline define:vars={{stripeKey}}>
  window.STRIPE_PUBLISHABLE_KEY = stripeKey;
</script>

<script>
// Enforce two-tier subscription model with subscription status checking
console.log('üîß DEBUG: Premium page script loading...');
console.log('üîß DEBUG: Stripe key available:', !!window.STRIPE_PUBLISHABLE_KEY);

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîß DEBUG: DOM loaded, initializing...');
    
    // Check if publishable key is available
    if (!window.STRIPE_PUBLISHABLE_KEY) {
        console.error('‚ùå STRIPE_PUBLISHABLE_KEY is not available!');
        showConfigurationError();
        return;
    }
    
    // Initialize Stripe
    const stripe = Stripe(window.STRIPE_PUBLISHABLE_KEY);
    if (!stripe) {
        console.error('‚ùå Failed to load Stripe.js');
        showConfigurationError();
        return;
    }
    
    console.log('‚úÖ Stripe.js loaded successfully');
    
    // Get trainer ID and load subscription status
    const trainerId = getTrainerId();
    if (trainerId) {
        await loadSubscriptionStatus(trainerId);
        setupPlanButtonListeners(stripe, trainerId);
    } else {
        showNoTrainerIdState();
    }
    
    // Handle payment success/cancellation
    handlePaymentRedirects();
});

// Get trainer ID from URL parameters or prompt user
function getTrainerId() {
    const urlParams = new URLSearchParams(window.location.search);
    let trainerId = urlParams.get('trainerId');
    
    if (!trainerId) {
        // For testing/demo, allow manual entry
        trainerId = prompt('Enter your Trainer ID or email (for testing):');
    }
    
    console.log('üîß DEBUG: Using trainer ID:', trainerId);
    return trainerId;
}

// Load trainer's subscription status from Supabase
async function loadSubscriptionStatus(trainerId) {
    console.log('üì° Loading subscription status for trainer:', trainerId);
    
    try {
        // Import centralized Supabase client
        const { supabase } = await import('../../lib/supabaseClient.js');
        
        // Query trainer by ID or email
        let query = supabase
            .from('trainers')
            .select('payment_status, premium_status, name, email');
        
        if (trainerId.includes('@')) {
            query = query.eq('email', trainerId);
        } else {
            query = query.eq('id', trainerId);
        }
        
        const { data: trainer, error } = await query.single();
        
        if (error) {
            console.error('‚ùå Error fetching trainer:', error);
            showTrainerNotFoundState();
            return;
        }
        
        console.log('‚úÖ Trainer found:', trainer);
        showPlansBasedOnStatus(trainer.payment_status, trainer.premium_status);
        
    } catch (error) {
        console.error('‚ùå Error loading subscription status:', error);
        showGenericPlansState();
    }
}

// Show plans based on subscription status - ENFORCE HIERARCHY
function showPlansBasedOnStatus(paymentStatus, premiumStatus) {
    console.log('üéØ Showing plans for status:', { paymentStatus, premiumStatus });
    
    // Hide loading state
    document.getElementById('subscription-loading').style.display = 'none';
    document.getElementById('plans-container').style.display = 'grid';
    
    const standardPlan = document.getElementById('standard-plan');
    const premiumPlan = document.getElementById('premium-plan');
    const premiumUnavailable = document.getElementById('premium-unavailable');
    const premiumActive = document.getElementById('premium-active');
    
    // Reset all plan visibility
    premiumPlan.style.display = 'none';
    premiumUnavailable.style.display = 'none';
    premiumActive.style.display = 'none';
    
    if (paymentStatus !== 'paid_standard') {
        // STEP 1: Show Standard plan as primary, Premium as unavailable
        standardPlan.style.display = 'block';
        document.getElementById('standard-button').textContent = 'Get Standard Listing';
        document.getElementById('standard-button').disabled = false;
        document.getElementById('standard-button').classList.remove('disabled');
        
        // Show Premium as unavailable
        premiumUnavailable.style.display = 'block';
        
    } else {
        // Has Standard subscription
        standardPlan.style.display = 'block';
        document.getElementById('standard-status').innerHTML = '<div class="status-active">‚úÖ Standard Active</div>';
        document.getElementById('standard-status').style.display = 'block';
        document.getElementById('standard-button').textContent = 'Standard Active';
        document.getElementById('standard-button').disabled = true;
        document.getElementById('standard-button').classList.add('disabled');
        
        if (premiumStatus === 'active') {
            // STEP 2: Show Premium as active
            premiumActive.style.display = 'block';
        } else {
            // STEP 2: Show Premium as available upgrade
            premiumPlan.style.display = 'block';
        }
    }
}

// Setup event listeners for plan buttons
function setupPlanButtonListeners(stripe, trainerId) {
    const planButtons = document.querySelectorAll('.plan-button:not(.disabled)');
    console.log(`üîß DEBUG: Setting up ${planButtons.length} plan button listeners`);
    
    planButtons.forEach((button, index) => {
        if (button.disabled) return;
        
        console.log(`üîß DEBUG: Adding event listener to button ${index + 1}`);
        
        button.addEventListener('click', async (e) => {
            console.log('üîß DEBUG: Plan button clicked!', e.target);
            e.preventDefault();
            
            const priceId = e.target.dataset.priceId;
            const plan = e.target.dataset.plan;
            
            console.log('üîß DEBUG: Button data:', { priceId, plan, trainerId });
            
            if (!priceId || !trainerId) {
                console.error('‚ùå Missing required data:', { priceId, trainerId });
                alert('Missing required information. Please try again.');
                return;
            }
            
            await handleCheckoutSession(stripe, e.target, priceId, plan, trainerId);
        });
    });
    
    // Setup manage premium button
    const managePremiumButton = document.getElementById('manage-premium-button');
    if (managePremiumButton) {
        managePremiumButton.addEventListener('click', () => {
            window.location.href = '/dashboard';
        });
    }
}

// Handle checkout session creation
async function handleCheckoutSession(stripe, button, priceId, plan, trainerId) {
    // Show loading state
    const originalText = button.textContent;
    button.disabled = true;
    button.textContent = 'Creating checkout session...';
    button.style.opacity = '0.7';
    
    try {
        console.log(`üîß Creating checkout session for plan: ${plan}, priceId: ${priceId}, trainerId: ${trainerId}`);
        
        // Call our checkout session API with hierarchy enforcement
        const response = await fetch('/api/create-checkout-session', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                priceId: priceId,
                trainerId: trainerId,
                planName: plan
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data.sessionId) {
            throw new Error('No session ID returned from server');
        }
        
        // Redirect to Stripe Checkout
        console.log('‚úÖ Redirecting to Stripe Checkout...');
        button.textContent = 'Redirecting to payment...';
        
        const { error } = await stripe.redirectToCheckout({
            sessionId: data.sessionId
        });
        
        if (error) {
            throw new Error(error.message);
        }
        
    } catch (error) {
        console.error('‚ùå Error creating checkout session:', error);
        
        // Show user-friendly error message
        let errorMessage = 'Sorry, there was a problem processing your request. ';
        if (error.message.includes('Premium features require an active Standard subscription')) {
            errorMessage += 'You must purchase a Standard subscription first before upgrading to Premium.';
        } else if (error.message.includes('404')) {
            errorMessage += 'The payment service is not configured. Please contact support.';
        } else {
            errorMessage += error.message;
        }
        
        alert(errorMessage);
        
        // Reset button state
        button.disabled = false;
        button.textContent = originalText;
        button.style.opacity = '1';
    }
}

// State display functions
function showConfigurationError() {
    document.getElementById('subscription-loading').innerHTML = `
        <div class="error-state">
            <h3>‚ö†Ô∏è Configuration Error</h3>
            <p>Payment system is not configured. Please contact support.</p>
        </div>
    `;
}

function showTrainerNotFoundState() {
    document.getElementById('subscription-loading').innerHTML = `
        <div class="error-state">
            <h3>üë§ Trainer Not Found</h3>
            <p>We couldn't find your trainer profile. Please <a href="/submit">submit your profile</a> first.</p>
        </div>
    `;
}

function showNoTrainerIdState() {
    console.log('üìù No trainer ID provided, showing generic plans');
    document.getElementById('subscription-loading').style.display = 'none';
    document.getElementById('plans-container').style.display = 'grid';
    
    // Show Standard plan and Premium as unavailable
    document.getElementById('standard-plan').style.display = 'block';
    document.getElementById('premium-unavailable').style.display = 'block';
}

function showGenericPlansState() {
    console.log('üîÑ Showing generic plans state');
    showNoTrainerIdState();
}

// Handle payment success/cancellation
function handlePaymentRedirects() {
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('session_id');
    const cancelled = urlParams.get('cancelled');
    
    if (sessionId) {
        // Show success message
        const successMessage = document.createElement('div');
        successMessage.className = 'success-message';
        successMessage.innerHTML = `
            <div class="success-content">
                <h3>üéâ Payment Successful!</h3>
                <p>Your subscription has been activated. Changes will be visible within a few minutes.</p>
                <button onclick="this.parentElement.parentElement.remove(); location.reload();" class="button">Refresh Page</button>
            </div>
        `;
        document.body.insertBefore(successMessage, document.body.firstChild);
        
        // Remove URL parameters
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
    }
    
    if (cancelled) {
        alert('Payment was cancelled. You can try again anytime.');
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
    }
}
</script>

<style>
    /* Add success message styling */
    .success-message {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
    
    .success-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        text-align: center;
        max-width: 400px;
        margin: 1rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }
    
    .success-content h3 {
        color: var(--color-accent-teal);
        margin-bottom: 1rem;
    }
    
    .success-content p {
        margin-bottom: 1.5rem;
        color: var(--color-text-light);
    }
    
    .premium-page {
        padding: 3rem 0;
        min-height: 70vh;
    }

    .page-header {
        text-align: center;
        margin-bottom: 4rem;
    }

    .page-header h1 {
        font-size: 3.5em;
        color: var(--color-text-light);
        margin-bottom: 1rem;
        background: linear-gradient(135deg, var(--color-accent-mustard), var(--color-accent-teal));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .page-subtitle {
        font-size: 1.3em;
        color: var(--color-text-light);
        opacity: 0.8;
        max-width: 600px;
        margin: 0 auto;
    }

    /* Benefits Section */
    .benefits-section {
        margin-bottom: 5rem;
    }

    .benefits-section h2 {
        text-align: center;
        margin-bottom: 3rem;
        font-size: 2.5em;
    }

    .benefits-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 2rem;
    }

    .benefit-card {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow-sm);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .benefit-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-lg);
    }

    .benefit-icon {
        font-size: 3em;
        margin-bottom: 1rem;
    }

    .benefit-card h3 {
        margin-bottom: 1rem;
        color: var(--color-text-light);
    }

    .benefit-card p {
        color: var(--color-text-light);
        opacity: 0.8;
    }

    /* Pricing Section */
    .pricing-section {
        margin-bottom: 5rem;
    }

    .pricing-section h2 {
        text-align: center;
        margin-bottom: 3rem;
        font-size: 2.5em;
    }

    .pricing-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 2rem;
        max-width: 1000px;
        margin: 0 auto;
    }

    .pricing-card {
        background: var(--color-card-bg-light);
        border: 2px solid var(--color-border-light);
        border-radius: 16px;
        padding: 2.5rem;
        text-align: center;
        position: relative;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .pricing-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
    }

    .pricing-card.popular {
        border-color: var(--color-accent-mustard);
        background: linear-gradient(135deg, 
            var(--color-card-bg-light) 0%, 
            color-mix(in srgb, var(--color-accent-mustard) 3%, var(--color-card-bg-light)) 100%
        );
    }

    .popular-badge {
        position: absolute;
        top: -15px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--color-accent-mustard);
        color: var(--color-text-light);
        padding: 0.5em 1.5em;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(232, 185, 79, 0.3);
    }

    .plan-header h3 {
        font-size: 1.5em;
        margin-bottom: 1rem;
        color: var(--color-text-light);
    }

    .price {
        margin-bottom: 0.5rem;
    }

    .currency {
        font-size: 1.2em;
        vertical-align: top;
        color: var(--color-text-light);
    }

    .amount {
        font-size: 3em;
        font-weight: 700;
        color: var(--color-text-light);
    }

    .period {
        font-size: 1em;
        color: var(--color-text-light);
        opacity: 0.7;
    }

    .savings {
        color: var(--color-accent-teal);
        font-weight: 600;
        font-size: 0.9em;
        margin-bottom: 1.5rem;
    }

    .plan-features {
        list-style: none;
        padding: 0;
        margin: 2rem 0;
        text-align: left;
    }

    .plan-features li {
        padding: 0.5rem 0;
        color: var(--color-text-light);
    }

    .plan-button {
        width: 100%;
        margin-top: 1.5rem;
        padding: 1rem 2rem;
        font-size: 1.1em;
    }

    /* FAQ Section */
    .faq-section {
        margin-bottom: 5rem;
    }

    .faq-section h2 {
        text-align: center;
        margin-bottom: 3rem;
        font-size: 2.5em;
    }

    .faq-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .faq-item {
        background: var(--color-card-bg-light);
        border: 1px solid var(--color-border-light);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: var(--shadow-sm);
    }

    .faq-item h3 {
        margin-bottom: 1rem;
        color: var(--color-text-light);
        font-size: 1.2em;
    }

    .faq-item p {
        color: var(--color-text-light);
        opacity: 0.8;
        line-height: 1.6;
    }

    /* CTA Section */
    .cta-section {
        background: linear-gradient(135deg, var(--color-accent-teal), var(--color-accent-mustard));
        border-radius: 16px;
        padding: 4rem 2rem;
        text-align: center;
        color: white;
    }

    .cta-content h2 {
        margin-bottom: 1rem;
        color: white;
        font-size: 2.5em;
    }

    .cta-content p {
        font-size: 1.2em;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    .button.large {
        padding: 1.2em 3em;
        font-size: 1.2em;
        background: white;
        color: var(--color-text-light);
    }

    .button.large:hover {
        background: var(--color-background-light);
        transform: translateY(-3px);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .page-header h1 {
            font-size: 2.5em;
        }
        
        .pricing-grid {
            grid-template-columns: 1fr;
        }
        
        .benefits-grid {
            grid-template-columns: 1fr;
        }
        
        .faq-grid {
            grid-template-columns: 1fr;
        }
    }

    /* Two-tier hierarchy specific styles */
    .pricing-hierarchy {
        text-align: center;
        margin-bottom: 2rem;
    }

    .hierarchy-note {
        background: var(--color-accent-teal);
        color: white;
        padding: 1rem 2rem;
        border-radius: 8px;
        display: inline-block;
        font-weight: 500;
    }

    .loading-state {
        text-align: center;
        padding: 3rem;
        background: var(--color-card-bg-light);
        border-radius: 12px;
        margin-bottom: 2rem;
    }

    .error-state {
        background: #fee;
        color: #c33;
        padding: 2rem;
        border-radius: 8px;
        text-align: center;
    }

    .error-state h3 {
        margin-bottom: 1rem;
        color: #c33;
    }

    /* Plan status indicators */
    .plan-status {
        margin-top: 1rem;
    }

    .status-active {
        color: var(--color-accent-teal);
        font-weight: 600;
        padding: 0.5rem 1rem;
        background: color-mix(in srgb, var(--color-accent-teal) 10%, var(--color-card-bg-light));
        border-radius: 6px;
        display: inline-block;
    }

    /* Upgrade badge */
    .upgrade-badge {
        position: absolute;
        top: -15px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--color-accent-teal);
        color: white;
        padding: 0.5em 1.5em;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(54, 130, 127, 0.3);
    }

    /* Unavailable plan styles */
    .pricing-card.unavailable {
        opacity: 0.6;
        border-color: #ccc;
        background: #f8f8f8;
    }

    .unavailable-badge {
        position: absolute;
        top: -15px;
        left: 50%;
        transform: translateX(-50%);
        background: #999;
        color: white;
        padding: 0.5em 1.5em;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
    }

    .upgrade-note {
        color: #666;
        font-size: 0.9em;
        margin-top: 1rem;
        font-style: italic;
    }

    /* Active plan styles */
    .pricing-card.active {
        border-color: var(--color-accent-teal);
        background: linear-gradient(135deg, 
            var(--color-card-bg-light) 0%, 
            color-mix(in srgb, var(--color-accent-teal) 5%, var(--color-card-bg-light)) 100%
        );
    }

    .active-badge {
        position: absolute;
        top: -15px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--color-accent-teal);
        color: white;
        padding: 0.5em 1.5em;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(54, 130, 127, 0.3);
    }

    .status-text {
        color: var(--color-accent-teal);
        font-weight: 600;
        margin-bottom: 1.5rem;
        font-size: 1.1em;
    }

    /* Button states */
    .button.disabled {
        background: #ccc;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .button.disabled:hover {
        background: #ccc;
        transform: none;
    }

    .button.secondary {
        background: transparent;
        border: 2px solid var(--color-accent-teal);
        color: var(--color-accent-teal);
    }

    .button.secondary:hover {
        background: var(--color-accent-teal);
        color: white;
    }

    /* Success message */
    .success-message {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .success-content {
        background: white;
        padding: 3rem;
        border-radius: 12px;
        text-align: center;
        max-width: 500px;
        margin: 2rem;
    }

    .success-content h3 {
        color: var(--color-accent-teal);
        margin-bottom: 1rem;
    }
</style>
