---
---

<div class="preferences-panel" id="preferences-panel">
    <button class="preferences-toggle neu-button" aria-label="Toggle preferences panel">
        <span class="icon">⚙️</span>
    </button>
    
    <div class="preferences-content neu-card" id="preferences-content">
        <h3>Display Settings</h3>
        
        <div class="preference-group">
            <label for="theme-select">Theme</label>
            <select id="theme-select" class="neu-select">
                <option value="light">Light</option>
                <option value="dark">Dark</option>
                <option value="auto">System</option>
            </select>
        </div>
        
        <div class="preference-group">
            <label>Text Size</label>
            <div class="button-group">
                <button class="neu-button" data-size="small">Small</button>
                <button class="neu-button active" data-size="medium">Medium</button>
                <button class="neu-button" data-size="large">Large</button>
            </div>
        </div>
        
    </div>
</div>

<script>
    const panel = document.getElementById('preferences-panel');
    const toggleBtn = panel.querySelector('.preferences-toggle');
    const themeSelect = document.getElementById('theme-select');
    const sizeButtons = panel.querySelectorAll('.button-group .neu-button');

    // Toggle panel on click
    toggleBtn.addEventListener('click', (e) => {
        panel.classList.toggle('open');
        e.stopPropagation();
    });
    // Close panel when clicking outside
    document.addEventListener('click', (e) => {
        if (panel.classList.contains('open') && !panel.contains(e.target)) {
            panel.classList.remove('open');
        }
    });

    // Theme preference
    themeSelect.addEventListener('change', (e) => {
        const theme = e.target.value;
        if (theme === 'dark') {
            document.documentElement.classList.add('dark-mode');
            localStorage.setItem('theme', 'dark');
        } else if (theme === 'light') {
            document.documentElement.classList.remove('dark-mode');
            localStorage.setItem('theme', 'light');
        } else {
            localStorage.removeItem('theme');
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.classList.add('dark-mode');
            } else {
                document.documentElement.classList.remove('dark-mode');
            }
        }
    });

    // Font size buttons
    sizeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            sizeButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            let scale = 1;
            if (btn.dataset.size === 'small') scale = 0.8;
            else if (btn.dataset.size === 'large') scale = 1.2;
            document.documentElement.style.setProperty('--user-font-scale', scale);
            localStorage.setItem('user-font-scale', scale);
        });
    });

    // Load saved preferences
    document.addEventListener('DOMContentLoaded', () => {
        // Theme
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) themeSelect.value = savedTheme;
        // Font scale
        const savedScale = localStorage.getItem('user-font-scale');
        if (savedScale) {
            const sc = parseFloat(savedScale);
            document.documentElement.style.setProperty('--user-font-scale', sc);
            sizeButtons.forEach(b => {
                if ((b.dataset.size === 'small' && sc < 1) || (b.dataset.size === 'medium' && sc === 1) || (b.dataset.size === 'large' && sc > 1)) {
                    b.classList.add('active');
                } else {
                    b.classList.remove('active');
                }
            });
        }
    });
</script>

<style>
.preferences-panel {
    position: fixed;
    right: var(--space-4);
    bottom: var(--space-4);
    z-index: 1000;
}

.preferences-toggle {
    width: var(--tap-target-min);
    height: var(--tap-target-min);
    border-radius: 50%;
    border: none;
    background: var(--color-accent-teal);
    color: white;
    cursor: pointer;
    box-shadow: var(--shadow-neu-light);
    transition: transform var(--animation-duration-base) var(--transition-smooth);
}

.dark-mode .preferences-toggle {
    box-shadow: var(--shadow-neu-dark);
}

.preferences-toggle:hover {
    transform: rotate(45deg);
}

.preferences-content {
    position: absolute;
    bottom: 100%;
    right: 0;
    margin-bottom: var(--space-4);
    padding: var(--space-4);
    width: 300px;
    background: var(--color-card-bg-light);
    border-radius: var(--card-radius);
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all var(--animation-duration-base) var(--transition-smooth);
}

.preferences-panel.open .preferences-content {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.preference-group {
    margin: var(--space-4) 0;
}

.preference-group label {
    display: block;
    margin-bottom: var(--space-2);
    font-weight: 500;
}

.slider-group {
    display: flex;
    align-items: center;
    gap: var(--space-2);
}

.neu-button {
    padding: var(--space-2) var(--space-4);
    border: none;
    border-radius: var(--border-radius-md);
    background: var(--color-card-bg-light);
    box-shadow: var(--shadow-neu-light);
    cursor: pointer;
    transition: all var(--animation-duration-base) var(--transition-smooth);
}

.dark-mode .neu-button {
    box-shadow: var(--shadow-neu-dark);
}

.neu-button:active {
    box-shadow: var(--shadow-neu-inset-light);
}

.dark-mode .neu-button:active {
    box-shadow: var(--shadow-neu-inset-dark);
}

.neu-button.small {
    padding: var(--space-1) var(--space-2);
}

.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--color-border-light);
    transition: .4s;
    border-radius: 34px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: var(--color-accent-teal);
}

input:checked + .slider:before {
    transform: translateX(26px);
}

.neu-select {
    width: 100%;
    padding: var(--space-2);
    border: none;
    border-radius: var(--border-radius-md);
    background: var(--color-card-bg-light);
    box-shadow: var(--shadow-neu-inset-light);
    cursor: pointer;
}

.dark-mode .neu-select {
    box-shadow: var(--shadow-neu-inset-dark);
}
</style>
